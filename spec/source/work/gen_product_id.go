// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package work

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// GenProductID is an object representing the database table.
type GenProductID struct { // 商品ID(WORK)
	ProductIdw string `boil:"product_idw" json:"product_idw" toml:"product_idw" yaml:"product_idw"`
	// 商品名
	ProductName string `boil:"product_name" json:"product_name" toml:"product_name" yaml:"product_name"`
	// 作成日時
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	// 更新日時
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	// 作成者
	CreatedBy null.String `boil:"created_by" json:"created_by,omitempty" toml:"created_by" yaml:"created_by,omitempty"`
	// 更新者
	UpdatedBy null.String `boil:"updated_by" json:"updated_by,omitempty" toml:"updated_by" yaml:"updated_by,omitempty"`

	R *genProductIDR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L genProductIDL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GenProductIDColumns = struct {
	ProductIdw  string
	ProductName string
	CreatedAt   string
	UpdatedAt   string
	CreatedBy   string
	UpdatedBy   string
}{
	ProductIdw:  "product_idw",
	ProductName: "product_name",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	CreatedBy:   "created_by",
	UpdatedBy:   "updated_by",
}

var GenProductIDTableColumns = struct {
	ProductIdw  string
	ProductName string
	CreatedAt   string
	UpdatedAt   string
	CreatedBy   string
	UpdatedBy   string
}{
	ProductIdw:  "gen_product_id.product_idw",
	ProductName: "gen_product_id.product_name",
	CreatedAt:   "gen_product_id.created_at",
	UpdatedAt:   "gen_product_id.updated_at",
	CreatedBy:   "gen_product_id.created_by",
	UpdatedBy:   "gen_product_id.updated_by",
}

// Generated where

var GenProductIDWhere = struct {
	ProductIdw  whereHelperstring
	ProductName whereHelperstring
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
	CreatedBy   whereHelpernull_String
	UpdatedBy   whereHelpernull_String
}{
	ProductIdw:  whereHelperstring{field: "\"work\".\"gen_product_id\".\"product_idw\""},
	ProductName: whereHelperstring{field: "\"work\".\"gen_product_id\".\"product_name\""},
	CreatedAt:   whereHelpertime_Time{field: "\"work\".\"gen_product_id\".\"created_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"work\".\"gen_product_id\".\"updated_at\""},
	CreatedBy:   whereHelpernull_String{field: "\"work\".\"gen_product_id\".\"created_by\""},
	UpdatedBy:   whereHelpernull_String{field: "\"work\".\"gen_product_id\".\"updated_by\""},
}

// GenProductIDRels is where relationship names are stored.
var GenProductIDRels = struct {
	ProductIdwGenOrderNos string
}{
	ProductIdwGenOrderNos: "ProductIdwGenOrderNos",
}

// genProductIDR is where relationships are stored.
type genProductIDR struct {
	ProductIdwGenOrderNos GenOrderNoSlice `boil:"ProductIdwGenOrderNos" json:"ProductIdwGenOrderNos" toml:"ProductIdwGenOrderNos" yaml:"ProductIdwGenOrderNos"`
}

// NewStruct creates a new relationship struct
func (*genProductIDR) NewStruct() *genProductIDR {
	return &genProductIDR{}
}

func (r *genProductIDR) GetProductIdwGenOrderNos() GenOrderNoSlice {
	if r == nil {
		return nil
	}
	return r.ProductIdwGenOrderNos
}

// genProductIDL is where Load methods for each relationship are stored.
type genProductIDL struct{}

var (
	genProductIDAllColumns            = []string{"product_idw", "product_name", "created_at", "updated_at", "created_by", "updated_by"}
	genProductIDColumnsWithoutDefault = []string{"product_idw", "product_name"}
	genProductIDColumnsWithDefault    = []string{"created_at", "updated_at", "created_by", "updated_by"}
	genProductIDPrimaryKeyColumns     = []string{"product_idw"}
	genProductIDGeneratedColumns      = []string{}
)

type (
	// GenProductIDSlice is an alias for a slice of pointers to GenProductID.
	// This should almost always be used instead of []GenProductID.
	GenProductIDSlice []*GenProductID
	// GenProductIDHook is the signature for custom GenProductID hook methods
	GenProductIDHook func(context.Context, boil.ContextExecutor, *GenProductID) error

	genProductIDQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	genProductIDType                 = reflect.TypeOf(&GenProductID{})
	genProductIDMapping              = queries.MakeStructMapping(genProductIDType)
	genProductIDPrimaryKeyMapping, _ = queries.BindMapping(genProductIDType, genProductIDMapping, genProductIDPrimaryKeyColumns)
	genProductIDInsertCacheMut       sync.RWMutex
	genProductIDInsertCache          = make(map[string]insertCache)
	genProductIDUpdateCacheMut       sync.RWMutex
	genProductIDUpdateCache          = make(map[string]updateCache)
	genProductIDUpsertCacheMut       sync.RWMutex
	genProductIDUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var genProductIDAfterSelectMu sync.Mutex
var genProductIDAfterSelectHooks []GenProductIDHook

var genProductIDBeforeInsertMu sync.Mutex
var genProductIDBeforeInsertHooks []GenProductIDHook
var genProductIDAfterInsertMu sync.Mutex
var genProductIDAfterInsertHooks []GenProductIDHook

var genProductIDBeforeUpdateMu sync.Mutex
var genProductIDBeforeUpdateHooks []GenProductIDHook
var genProductIDAfterUpdateMu sync.Mutex
var genProductIDAfterUpdateHooks []GenProductIDHook

var genProductIDBeforeDeleteMu sync.Mutex
var genProductIDBeforeDeleteHooks []GenProductIDHook
var genProductIDAfterDeleteMu sync.Mutex
var genProductIDAfterDeleteHooks []GenProductIDHook

var genProductIDBeforeUpsertMu sync.Mutex
var genProductIDBeforeUpsertHooks []GenProductIDHook
var genProductIDAfterUpsertMu sync.Mutex
var genProductIDAfterUpsertHooks []GenProductIDHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GenProductID) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range genProductIDAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GenProductID) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range genProductIDBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GenProductID) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range genProductIDAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *GenProductID) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range genProductIDBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *GenProductID) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range genProductIDAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *GenProductID) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range genProductIDBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *GenProductID) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range genProductIDAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GenProductID) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range genProductIDBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GenProductID) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range genProductIDAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGenProductIDHook registers your hook function for all future operations.
func AddGenProductIDHook(hookPoint boil.HookPoint, genProductIDHook GenProductIDHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		genProductIDAfterSelectMu.Lock()
		genProductIDAfterSelectHooks = append(genProductIDAfterSelectHooks, genProductIDHook)
		genProductIDAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		genProductIDBeforeInsertMu.Lock()
		genProductIDBeforeInsertHooks = append(genProductIDBeforeInsertHooks, genProductIDHook)
		genProductIDBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		genProductIDAfterInsertMu.Lock()
		genProductIDAfterInsertHooks = append(genProductIDAfterInsertHooks, genProductIDHook)
		genProductIDAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		genProductIDBeforeUpdateMu.Lock()
		genProductIDBeforeUpdateHooks = append(genProductIDBeforeUpdateHooks, genProductIDHook)
		genProductIDBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		genProductIDAfterUpdateMu.Lock()
		genProductIDAfterUpdateHooks = append(genProductIDAfterUpdateHooks, genProductIDHook)
		genProductIDAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		genProductIDBeforeDeleteMu.Lock()
		genProductIDBeforeDeleteHooks = append(genProductIDBeforeDeleteHooks, genProductIDHook)
		genProductIDBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		genProductIDAfterDeleteMu.Lock()
		genProductIDAfterDeleteHooks = append(genProductIDAfterDeleteHooks, genProductIDHook)
		genProductIDAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		genProductIDBeforeUpsertMu.Lock()
		genProductIDBeforeUpsertHooks = append(genProductIDBeforeUpsertHooks, genProductIDHook)
		genProductIDBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		genProductIDAfterUpsertMu.Lock()
		genProductIDAfterUpsertHooks = append(genProductIDAfterUpsertHooks, genProductIDHook)
		genProductIDAfterUpsertMu.Unlock()
	}
}

// OneG returns a single genProductID record from the query using the global executor.
func (q genProductIDQuery) OneG(ctx context.Context) (*GenProductID, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single genProductID record from the query.
func (q genProductIDQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GenProductID, error) {
	o := &GenProductID{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "work: failed to execute a one query for gen_product_id")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all GenProductID records from the query using the global executor.
func (q genProductIDQuery) AllG(ctx context.Context) (GenProductIDSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all GenProductID records from the query.
func (q genProductIDQuery) All(ctx context.Context, exec boil.ContextExecutor) (GenProductIDSlice, error) {
	var o []*GenProductID

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "work: failed to assign all query results to GenProductID slice")
	}

	if len(genProductIDAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all GenProductID records in the query using the global executor
func (q genProductIDQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all GenProductID records in the query.
func (q genProductIDQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "work: failed to count gen_product_id rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q genProductIDQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q genProductIDQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "work: failed to check if gen_product_id exists")
	}

	return count > 0, nil
}

// ProductIdwGenOrderNos retrieves all the gen_order_no's GenOrderNos with an executor via product_idw column.
func (o *GenProductID) ProductIdwGenOrderNos(mods ...qm.QueryMod) genOrderNoQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"work\".\"gen_order_no\".\"product_idw\"=?", o.ProductIdw),
	)

	return GenOrderNos(queryMods...)
}

// LoadProductIdwGenOrderNos allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (genProductIDL) LoadProductIdwGenOrderNos(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGenProductID interface{}, mods queries.Applicator) error {
	var slice []*GenProductID
	var object *GenProductID

	if singular {
		var ok bool
		object, ok = maybeGenProductID.(*GenProductID)
		if !ok {
			object = new(GenProductID)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGenProductID)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGenProductID))
			}
		}
	} else {
		s, ok := maybeGenProductID.(*[]*GenProductID)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGenProductID)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGenProductID))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &genProductIDR{}
		}
		args[object.ProductIdw] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &genProductIDR{}
			}
			args[obj.ProductIdw] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`work.gen_order_no`),
		qm.WhereIn(`work.gen_order_no.product_idw in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load gen_order_no")
	}

	var resultSlice []*GenOrderNo
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice gen_order_no")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on gen_order_no")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for gen_order_no")
	}

	if len(genOrderNoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProductIdwGenOrderNos = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &genOrderNoR{}
			}
			foreign.R.ProductIdwGenProductID = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ProductIdw == foreign.ProductIdw {
				local.R.ProductIdwGenOrderNos = append(local.R.ProductIdwGenOrderNos, foreign)
				if foreign.R == nil {
					foreign.R = &genOrderNoR{}
				}
				foreign.R.ProductIdwGenProductID = local
				break
			}
		}
	}

	return nil
}

// AddProductIdwGenOrderNosG adds the given related objects to the existing relationships
// of the gen_product_id, optionally inserting them as new records.
// Appends related to o.R.ProductIdwGenOrderNos.
// Sets related.R.ProductIdwGenProductID appropriately.
// Uses the global database handle.
func (o *GenProductID) AddProductIdwGenOrderNosG(ctx context.Context, insert bool, related ...*GenOrderNo) error {
	return o.AddProductIdwGenOrderNos(ctx, boil.GetContextDB(), insert, related...)
}

// AddProductIdwGenOrderNos adds the given related objects to the existing relationships
// of the gen_product_id, optionally inserting them as new records.
// Appends related to o.R.ProductIdwGenOrderNos.
// Sets related.R.ProductIdwGenProductID appropriately.
func (o *GenProductID) AddProductIdwGenOrderNos(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*GenOrderNo) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductIdw = o.ProductIdw
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"work\".\"gen_order_no\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"product_idw"}),
				strmangle.WhereClause("\"", "\"", 2, genOrderNoPrimaryKeyColumns),
			)
			values := []interface{}{o.ProductIdw, rel.OrderNow, rel.ProductIdw}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductIdw = o.ProductIdw
		}
	}

	if o.R == nil {
		o.R = &genProductIDR{
			ProductIdwGenOrderNos: related,
		}
	} else {
		o.R.ProductIdwGenOrderNos = append(o.R.ProductIdwGenOrderNos, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &genOrderNoR{
				ProductIdwGenProductID: o,
			}
		} else {
			rel.R.ProductIdwGenProductID = o
		}
	}
	return nil
}

// GenProductIds retrieves all the records using an executor.
func GenProductIds(mods ...qm.QueryMod) genProductIDQuery {
	mods = append(mods, qm.From("\"work\".\"gen_product_id\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"work\".\"gen_product_id\".*"})
	}

	return genProductIDQuery{q}
}

// FindGenProductIDG retrieves a single record by ID.
func FindGenProductIDG(ctx context.Context, productIdw string, selectCols ...string) (*GenProductID, error) {
	return FindGenProductID(ctx, boil.GetContextDB(), productIdw, selectCols...)
}

// FindGenProductID retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGenProductID(ctx context.Context, exec boil.ContextExecutor, productIdw string, selectCols ...string) (*GenProductID, error) {
	genProductIDObj := &GenProductID{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"work\".\"gen_product_id\" where \"product_idw\"=$1", sel,
	)

	q := queries.Raw(query, productIdw)

	err := q.Bind(ctx, exec, genProductIDObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "work: unable to select from gen_product_id")
	}

	if err = genProductIDObj.doAfterSelectHooks(ctx, exec); err != nil {
		return genProductIDObj, err
	}

	return genProductIDObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *GenProductID) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GenProductID) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("work: no gen_product_id provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(genProductIDColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	genProductIDInsertCacheMut.RLock()
	cache, cached := genProductIDInsertCache[key]
	genProductIDInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			genProductIDAllColumns,
			genProductIDColumnsWithDefault,
			genProductIDColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(genProductIDType, genProductIDMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(genProductIDType, genProductIDMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"work\".\"gen_product_id\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"work\".\"gen_product_id\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "work: unable to insert into gen_product_id")
	}

	if !cached {
		genProductIDInsertCacheMut.Lock()
		genProductIDInsertCache[key] = cache
		genProductIDInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single GenProductID record using the global executor.
// See Update for more documentation.
func (o *GenProductID) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the GenProductID.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GenProductID) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	genProductIDUpdateCacheMut.RLock()
	cache, cached := genProductIDUpdateCache[key]
	genProductIDUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			genProductIDAllColumns,
			genProductIDPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("work: unable to update gen_product_id, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"work\".\"gen_product_id\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, genProductIDPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(genProductIDType, genProductIDMapping, append(wl, genProductIDPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "work: unable to update gen_product_id row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "work: failed to get rows affected by update for gen_product_id")
	}

	if !cached {
		genProductIDUpdateCacheMut.Lock()
		genProductIDUpdateCache[key] = cache
		genProductIDUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q genProductIDQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q genProductIDQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "work: unable to update all for gen_product_id")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "work: unable to retrieve rows affected for gen_product_id")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o GenProductIDSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GenProductIDSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("work: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), genProductIDPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"work\".\"gen_product_id\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, genProductIDPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "work: unable to update all in genProductID slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "work: unable to retrieve rows affected all in update all genProductID")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *GenProductID) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GenProductID) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("work: no gen_product_id provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(genProductIDColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	genProductIDUpsertCacheMut.RLock()
	cache, cached := genProductIDUpsertCache[key]
	genProductIDUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			genProductIDAllColumns,
			genProductIDColumnsWithDefault,
			genProductIDColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			genProductIDAllColumns,
			genProductIDPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("work: unable to upsert gen_product_id, could not build update column list")
		}

		ret := strmangle.SetComplement(genProductIDAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(genProductIDPrimaryKeyColumns) == 0 {
				return errors.New("work: unable to upsert gen_product_id, could not build conflict column list")
			}

			conflict = make([]string, len(genProductIDPrimaryKeyColumns))
			copy(conflict, genProductIDPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"work\".\"gen_product_id\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(genProductIDType, genProductIDMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(genProductIDType, genProductIDMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "work: unable to upsert gen_product_id")
	}

	if !cached {
		genProductIDUpsertCacheMut.Lock()
		genProductIDUpsertCache[key] = cache
		genProductIDUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single GenProductID record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *GenProductID) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single GenProductID record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GenProductID) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("work: no GenProductID provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), genProductIDPrimaryKeyMapping)
	sql := "DELETE FROM \"work\".\"gen_product_id\" WHERE \"product_idw\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "work: unable to delete from gen_product_id")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "work: failed to get rows affected by delete for gen_product_id")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q genProductIDQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q genProductIDQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("work: no genProductIDQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "work: unable to delete all from gen_product_id")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "work: failed to get rows affected by deleteall for gen_product_id")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o GenProductIDSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GenProductIDSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(genProductIDBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), genProductIDPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"work\".\"gen_product_id\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, genProductIDPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "work: unable to delete all from genProductID slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "work: failed to get rows affected by deleteall for gen_product_id")
	}

	if len(genProductIDAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *GenProductID) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("work: no GenProductID provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GenProductID) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGenProductID(ctx, exec, o.ProductIdw)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GenProductIDSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("work: empty GenProductIDSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GenProductIDSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GenProductIDSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), genProductIDPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"work\".\"gen_product_id\".* FROM \"work\".\"gen_product_id\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, genProductIDPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "work: unable to reload all in GenProductIDSlice")
	}

	*o = slice

	return nil
}

// GenProductIDExistsG checks if the GenProductID row exists.
func GenProductIDExistsG(ctx context.Context, productIdw string) (bool, error) {
	return GenProductIDExists(ctx, boil.GetContextDB(), productIdw)
}

// GenProductIDExists checks if the GenProductID row exists.
func GenProductIDExists(ctx context.Context, exec boil.ContextExecutor, productIdw string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"work\".\"gen_product_id\" where \"product_idw\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, productIdw)
	}
	row := exec.QueryRowContext(ctx, sql, productIdw)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "work: unable to check if gen_product_id exists")
	}

	return exists, nil
}

// Exists checks if the GenProductID row exists.
func (o *GenProductID) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return GenProductIDExists(ctx, exec, o.ProductIdw)
}
