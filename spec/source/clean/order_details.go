// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package clean

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OrderDetail is an object representing the database table.
type OrderDetail struct { // 受注番号
	OrderNo int `boil:"order_no" json:"order_no" toml:"order_no" yaml:"order_no"`
	// 受注明細番号
	OrderDetailNo int `boil:"order_detail_no" json:"order_detail_no" toml:"order_detail_no" yaml:"order_detail_no"`
	// 商品名
	ProductName string `boil:"product_name" json:"product_name" toml:"product_name" yaml:"product_name"`
	// 受注数量
	ReceivingQuantity int `boil:"receiving_quantity" json:"receiving_quantity" toml:"receiving_quantity" yaml:"receiving_quantity"`
	// 出荷済フラグ
	ShippingFlag bool `boil:"shipping_flag" json:"shipping_flag" toml:"shipping_flag" yaml:"shipping_flag"`
	// キャンセルフラグ
	CancelFlag bool `boil:"cancel_flag" json:"cancel_flag" toml:"cancel_flag" yaml:"cancel_flag"`
	// 販売単価
	SellingPrice int `boil:"selling_price" json:"selling_price" toml:"selling_price" yaml:"selling_price"`
	// 商品原価
	CostPrice int `boil:"cost_price" json:"cost_price" toml:"cost_price" yaml:"cost_price"`
	// 作成日時
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	// 更新日時
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	// 作成者
	CreatedBy null.String `boil:"created_by" json:"created_by,omitempty" toml:"created_by" yaml:"created_by,omitempty"`
	// 更新者
	UpdatedBy null.String `boil:"updated_by" json:"updated_by,omitempty" toml:"updated_by" yaml:"updated_by,omitempty"`

	R *orderDetailR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L orderDetailL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrderDetailColumns = struct {
	OrderNo           string
	OrderDetailNo     string
	ProductName       string
	ReceivingQuantity string
	ShippingFlag      string
	CancelFlag        string
	SellingPrice      string
	CostPrice         string
	CreatedAt         string
	UpdatedAt         string
	CreatedBy         string
	UpdatedBy         string
}{
	OrderNo:           "order_no",
	OrderDetailNo:     "order_detail_no",
	ProductName:       "product_name",
	ReceivingQuantity: "receiving_quantity",
	ShippingFlag:      "shipping_flag",
	CancelFlag:        "cancel_flag",
	SellingPrice:      "selling_price",
	CostPrice:         "cost_price",
	CreatedAt:         "created_at",
	UpdatedAt:         "updated_at",
	CreatedBy:         "created_by",
	UpdatedBy:         "updated_by",
}

var OrderDetailTableColumns = struct {
	OrderNo           string
	OrderDetailNo     string
	ProductName       string
	ReceivingQuantity string
	ShippingFlag      string
	CancelFlag        string
	SellingPrice      string
	CostPrice         string
	CreatedAt         string
	UpdatedAt         string
	CreatedBy         string
	UpdatedBy         string
}{
	OrderNo:           "order_details.order_no",
	OrderDetailNo:     "order_details.order_detail_no",
	ProductName:       "order_details.product_name",
	ReceivingQuantity: "order_details.receiving_quantity",
	ShippingFlag:      "order_details.shipping_flag",
	CancelFlag:        "order_details.cancel_flag",
	SellingPrice:      "order_details.selling_price",
	CostPrice:         "order_details.cost_price",
	CreatedAt:         "order_details.created_at",
	UpdatedAt:         "order_details.updated_at",
	CreatedBy:         "order_details.created_by",
	UpdatedBy:         "order_details.updated_by",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var OrderDetailWhere = struct {
	OrderNo           whereHelperint
	OrderDetailNo     whereHelperint
	ProductName       whereHelperstring
	ReceivingQuantity whereHelperint
	ShippingFlag      whereHelperbool
	CancelFlag        whereHelperbool
	SellingPrice      whereHelperint
	CostPrice         whereHelperint
	CreatedAt         whereHelpertime_Time
	UpdatedAt         whereHelpertime_Time
	CreatedBy         whereHelpernull_String
	UpdatedBy         whereHelpernull_String
}{
	OrderNo:           whereHelperint{field: "\"clean\".\"order_details\".\"order_no\""},
	OrderDetailNo:     whereHelperint{field: "\"clean\".\"order_details\".\"order_detail_no\""},
	ProductName:       whereHelperstring{field: "\"clean\".\"order_details\".\"product_name\""},
	ReceivingQuantity: whereHelperint{field: "\"clean\".\"order_details\".\"receiving_quantity\""},
	ShippingFlag:      whereHelperbool{field: "\"clean\".\"order_details\".\"shipping_flag\""},
	CancelFlag:        whereHelperbool{field: "\"clean\".\"order_details\".\"cancel_flag\""},
	SellingPrice:      whereHelperint{field: "\"clean\".\"order_details\".\"selling_price\""},
	CostPrice:         whereHelperint{field: "\"clean\".\"order_details\".\"cost_price\""},
	CreatedAt:         whereHelpertime_Time{field: "\"clean\".\"order_details\".\"created_at\""},
	UpdatedAt:         whereHelpertime_Time{field: "\"clean\".\"order_details\".\"updated_at\""},
	CreatedBy:         whereHelpernull_String{field: "\"clean\".\"order_details\".\"created_by\""},
	UpdatedBy:         whereHelpernull_String{field: "\"clean\".\"order_details\".\"updated_by\""},
}

// OrderDetailRels is where relationship names are stored.
var OrderDetailRels = struct {
	OrderNoOrder       string
	ProductNameProduct string
}{
	OrderNoOrder:       "OrderNoOrder",
	ProductNameProduct: "ProductNameProduct",
}

// orderDetailR is where relationships are stored.
type orderDetailR struct {
	OrderNoOrder       *Order   `boil:"OrderNoOrder" json:"OrderNoOrder" toml:"OrderNoOrder" yaml:"OrderNoOrder"`
	ProductNameProduct *Product `boil:"ProductNameProduct" json:"ProductNameProduct" toml:"ProductNameProduct" yaml:"ProductNameProduct"`
}

// NewStruct creates a new relationship struct
func (*orderDetailR) NewStruct() *orderDetailR {
	return &orderDetailR{}
}

func (r *orderDetailR) GetOrderNoOrder() *Order {
	if r == nil {
		return nil
	}
	return r.OrderNoOrder
}

func (r *orderDetailR) GetProductNameProduct() *Product {
	if r == nil {
		return nil
	}
	return r.ProductNameProduct
}

// orderDetailL is where Load methods for each relationship are stored.
type orderDetailL struct{}

var (
	orderDetailAllColumns            = []string{"order_no", "order_detail_no", "product_name", "receiving_quantity", "shipping_flag", "cancel_flag", "selling_price", "cost_price", "created_at", "updated_at", "created_by", "updated_by"}
	orderDetailColumnsWithoutDefault = []string{"order_no", "order_detail_no", "product_name", "receiving_quantity", "shipping_flag", "cancel_flag", "selling_price", "cost_price"}
	orderDetailColumnsWithDefault    = []string{"created_at", "updated_at", "created_by", "updated_by"}
	orderDetailPrimaryKeyColumns     = []string{"order_no", "order_detail_no"}
	orderDetailGeneratedColumns      = []string{}
)

type (
	// OrderDetailSlice is an alias for a slice of pointers to OrderDetail.
	// This should almost always be used instead of []OrderDetail.
	OrderDetailSlice []*OrderDetail
	// OrderDetailHook is the signature for custom OrderDetail hook methods
	OrderDetailHook func(context.Context, boil.ContextExecutor, *OrderDetail) error

	orderDetailQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	orderDetailType                 = reflect.TypeOf(&OrderDetail{})
	orderDetailMapping              = queries.MakeStructMapping(orderDetailType)
	orderDetailPrimaryKeyMapping, _ = queries.BindMapping(orderDetailType, orderDetailMapping, orderDetailPrimaryKeyColumns)
	orderDetailInsertCacheMut       sync.RWMutex
	orderDetailInsertCache          = make(map[string]insertCache)
	orderDetailUpdateCacheMut       sync.RWMutex
	orderDetailUpdateCache          = make(map[string]updateCache)
	orderDetailUpsertCacheMut       sync.RWMutex
	orderDetailUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var orderDetailAfterSelectMu sync.Mutex
var orderDetailAfterSelectHooks []OrderDetailHook

var orderDetailBeforeInsertMu sync.Mutex
var orderDetailBeforeInsertHooks []OrderDetailHook
var orderDetailAfterInsertMu sync.Mutex
var orderDetailAfterInsertHooks []OrderDetailHook

var orderDetailBeforeUpdateMu sync.Mutex
var orderDetailBeforeUpdateHooks []OrderDetailHook
var orderDetailAfterUpdateMu sync.Mutex
var orderDetailAfterUpdateHooks []OrderDetailHook

var orderDetailBeforeDeleteMu sync.Mutex
var orderDetailBeforeDeleteHooks []OrderDetailHook
var orderDetailAfterDeleteMu sync.Mutex
var orderDetailAfterDeleteHooks []OrderDetailHook

var orderDetailBeforeUpsertMu sync.Mutex
var orderDetailBeforeUpsertHooks []OrderDetailHook
var orderDetailAfterUpsertMu sync.Mutex
var orderDetailAfterUpsertHooks []OrderDetailHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OrderDetail) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderDetailAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OrderDetail) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderDetailBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OrderDetail) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderDetailAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OrderDetail) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderDetailBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OrderDetail) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderDetailAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OrderDetail) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderDetailBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OrderDetail) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderDetailAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OrderDetail) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderDetailBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OrderDetail) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderDetailAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOrderDetailHook registers your hook function for all future operations.
func AddOrderDetailHook(hookPoint boil.HookPoint, orderDetailHook OrderDetailHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		orderDetailAfterSelectMu.Lock()
		orderDetailAfterSelectHooks = append(orderDetailAfterSelectHooks, orderDetailHook)
		orderDetailAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		orderDetailBeforeInsertMu.Lock()
		orderDetailBeforeInsertHooks = append(orderDetailBeforeInsertHooks, orderDetailHook)
		orderDetailBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		orderDetailAfterInsertMu.Lock()
		orderDetailAfterInsertHooks = append(orderDetailAfterInsertHooks, orderDetailHook)
		orderDetailAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		orderDetailBeforeUpdateMu.Lock()
		orderDetailBeforeUpdateHooks = append(orderDetailBeforeUpdateHooks, orderDetailHook)
		orderDetailBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		orderDetailAfterUpdateMu.Lock()
		orderDetailAfterUpdateHooks = append(orderDetailAfterUpdateHooks, orderDetailHook)
		orderDetailAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		orderDetailBeforeDeleteMu.Lock()
		orderDetailBeforeDeleteHooks = append(orderDetailBeforeDeleteHooks, orderDetailHook)
		orderDetailBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		orderDetailAfterDeleteMu.Lock()
		orderDetailAfterDeleteHooks = append(orderDetailAfterDeleteHooks, orderDetailHook)
		orderDetailAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		orderDetailBeforeUpsertMu.Lock()
		orderDetailBeforeUpsertHooks = append(orderDetailBeforeUpsertHooks, orderDetailHook)
		orderDetailBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		orderDetailAfterUpsertMu.Lock()
		orderDetailAfterUpsertHooks = append(orderDetailAfterUpsertHooks, orderDetailHook)
		orderDetailAfterUpsertMu.Unlock()
	}
}

// One returns a single orderDetail record from the query.
func (q orderDetailQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OrderDetail, error) {
	o := &OrderDetail{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "clean: failed to execute a one query for order_details")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all OrderDetail records from the query.
func (q orderDetailQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrderDetailSlice, error) {
	var o []*OrderDetail

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "clean: failed to assign all query results to OrderDetail slice")
	}

	if len(orderDetailAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all OrderDetail records in the query.
func (q orderDetailQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "clean: failed to count order_details rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q orderDetailQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "clean: failed to check if order_details exists")
	}

	return count > 0, nil
}

// OrderNoOrder pointed to by the foreign key.
func (o *OrderDetail) OrderNoOrder(mods ...qm.QueryMod) orderQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"order_no\" = ?", o.OrderNo),
	}

	queryMods = append(queryMods, mods...)

	return Orders(queryMods...)
}

// ProductNameProduct pointed to by the foreign key.
func (o *OrderDetail) ProductNameProduct(mods ...qm.QueryMod) productQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"product_name\" = ?", o.ProductName),
	}

	queryMods = append(queryMods, mods...)

	return Products(queryMods...)
}

// LoadOrderNoOrder allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orderDetailL) LoadOrderNoOrder(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrderDetail interface{}, mods queries.Applicator) error {
	var slice []*OrderDetail
	var object *OrderDetail

	if singular {
		var ok bool
		object, ok = maybeOrderDetail.(*OrderDetail)
		if !ok {
			object = new(OrderDetail)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrderDetail)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrderDetail))
			}
		}
	} else {
		s, ok := maybeOrderDetail.(*[]*OrderDetail)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrderDetail)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrderDetail))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &orderDetailR{}
		}
		args[object.OrderNo] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderDetailR{}
			}

			args[obj.OrderNo] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`clean.orders`),
		qm.WhereIn(`clean.orders.order_no in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Order")
	}

	var resultSlice []*Order
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Order")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for orders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orders")
	}

	if len(orderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OrderNoOrder = foreign
		if foreign.R == nil {
			foreign.R = &orderR{}
		}
		foreign.R.OrderNoOrderDetails = append(foreign.R.OrderNoOrderDetails, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OrderNo == foreign.OrderNo {
				local.R.OrderNoOrder = foreign
				if foreign.R == nil {
					foreign.R = &orderR{}
				}
				foreign.R.OrderNoOrderDetails = append(foreign.R.OrderNoOrderDetails, local)
				break
			}
		}
	}

	return nil
}

// LoadProductNameProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orderDetailL) LoadProductNameProduct(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrderDetail interface{}, mods queries.Applicator) error {
	var slice []*OrderDetail
	var object *OrderDetail

	if singular {
		var ok bool
		object, ok = maybeOrderDetail.(*OrderDetail)
		if !ok {
			object = new(OrderDetail)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrderDetail)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrderDetail))
			}
		}
	} else {
		s, ok := maybeOrderDetail.(*[]*OrderDetail)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrderDetail)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrderDetail))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &orderDetailR{}
		}
		args[object.ProductName] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderDetailR{}
			}

			args[obj.ProductName] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`clean.products`),
		qm.WhereIn(`clean.products.product_name in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Product")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Product")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for products")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductNameProduct = foreign
		if foreign.R == nil {
			foreign.R = &productR{}
		}
		foreign.R.ProductNameOrderDetails = append(foreign.R.ProductNameOrderDetails, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductName == foreign.ProductName {
				local.R.ProductNameProduct = foreign
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.ProductNameOrderDetails = append(foreign.R.ProductNameOrderDetails, local)
				break
			}
		}
	}

	return nil
}

// SetOrderNoOrder of the orderDetail to the related item.
// Sets o.R.OrderNoOrder to related.
// Adds o to related.R.OrderNoOrderDetails.
func (o *OrderDetail) SetOrderNoOrder(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Order) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"clean\".\"order_details\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"order_no"}),
		strmangle.WhereClause("\"", "\"", 2, orderDetailPrimaryKeyColumns),
	)
	values := []interface{}{related.OrderNo, o.OrderNo, o.OrderDetailNo}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OrderNo = related.OrderNo
	if o.R == nil {
		o.R = &orderDetailR{
			OrderNoOrder: related,
		}
	} else {
		o.R.OrderNoOrder = related
	}

	if related.R == nil {
		related.R = &orderR{
			OrderNoOrderDetails: OrderDetailSlice{o},
		}
	} else {
		related.R.OrderNoOrderDetails = append(related.R.OrderNoOrderDetails, o)
	}

	return nil
}

// SetProductNameProduct of the orderDetail to the related item.
// Sets o.R.ProductNameProduct to related.
// Adds o to related.R.ProductNameOrderDetails.
func (o *OrderDetail) SetProductNameProduct(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Product) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"clean\".\"order_details\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"product_name"}),
		strmangle.WhereClause("\"", "\"", 2, orderDetailPrimaryKeyColumns),
	)
	values := []interface{}{related.ProductName, o.OrderNo, o.OrderDetailNo}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductName = related.ProductName
	if o.R == nil {
		o.R = &orderDetailR{
			ProductNameProduct: related,
		}
	} else {
		o.R.ProductNameProduct = related
	}

	if related.R == nil {
		related.R = &productR{
			ProductNameOrderDetails: OrderDetailSlice{o},
		}
	} else {
		related.R.ProductNameOrderDetails = append(related.R.ProductNameOrderDetails, o)
	}

	return nil
}

// OrderDetails retrieves all the records using an executor.
func OrderDetails(mods ...qm.QueryMod) orderDetailQuery {
	mods = append(mods, qm.From("\"clean\".\"order_details\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"clean\".\"order_details\".*"})
	}

	return orderDetailQuery{q}
}

// FindOrderDetail retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrderDetail(ctx context.Context, exec boil.ContextExecutor, orderNo int, orderDetailNo int, selectCols ...string) (*OrderDetail, error) {
	orderDetailObj := &OrderDetail{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"clean\".\"order_details\" where \"order_no\"=$1 AND \"order_detail_no\"=$2", sel,
	)

	q := queries.Raw(query, orderNo, orderDetailNo)

	err := q.Bind(ctx, exec, orderDetailObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "clean: unable to select from order_details")
	}

	if err = orderDetailObj.doAfterSelectHooks(ctx, exec); err != nil {
		return orderDetailObj, err
	}

	return orderDetailObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OrderDetail) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("clean: no order_details provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(orderDetailColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	orderDetailInsertCacheMut.RLock()
	cache, cached := orderDetailInsertCache[key]
	orderDetailInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			orderDetailAllColumns,
			orderDetailColumnsWithDefault,
			orderDetailColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(orderDetailType, orderDetailMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(orderDetailType, orderDetailMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"clean\".\"order_details\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"clean\".\"order_details\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "clean: unable to insert into order_details")
	}

	if !cached {
		orderDetailInsertCacheMut.Lock()
		orderDetailInsertCache[key] = cache
		orderDetailInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the OrderDetail.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OrderDetail) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	orderDetailUpdateCacheMut.RLock()
	cache, cached := orderDetailUpdateCache[key]
	orderDetailUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			orderDetailAllColumns,
			orderDetailPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("clean: unable to update order_details, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"clean\".\"order_details\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, orderDetailPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(orderDetailType, orderDetailMapping, append(wl, orderDetailPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "clean: unable to update order_details row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "clean: failed to get rows affected by update for order_details")
	}

	if !cached {
		orderDetailUpdateCacheMut.Lock()
		orderDetailUpdateCache[key] = cache
		orderDetailUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q orderDetailQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "clean: unable to update all for order_details")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "clean: unable to retrieve rows affected for order_details")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrderDetailSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("clean: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderDetailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"clean\".\"order_details\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, orderDetailPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "clean: unable to update all in orderDetail slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "clean: unable to retrieve rows affected all in update all orderDetail")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OrderDetail) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("clean: no order_details provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(orderDetailColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	orderDetailUpsertCacheMut.RLock()
	cache, cached := orderDetailUpsertCache[key]
	orderDetailUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			orderDetailAllColumns,
			orderDetailColumnsWithDefault,
			orderDetailColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			orderDetailAllColumns,
			orderDetailPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("clean: unable to upsert order_details, could not build update column list")
		}

		ret := strmangle.SetComplement(orderDetailAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(orderDetailPrimaryKeyColumns) == 0 {
				return errors.New("clean: unable to upsert order_details, could not build conflict column list")
			}

			conflict = make([]string, len(orderDetailPrimaryKeyColumns))
			copy(conflict, orderDetailPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"clean\".\"order_details\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(orderDetailType, orderDetailMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(orderDetailType, orderDetailMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "clean: unable to upsert order_details")
	}

	if !cached {
		orderDetailUpsertCacheMut.Lock()
		orderDetailUpsertCache[key] = cache
		orderDetailUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single OrderDetail record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OrderDetail) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("clean: no OrderDetail provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), orderDetailPrimaryKeyMapping)
	sql := "DELETE FROM \"clean\".\"order_details\" WHERE \"order_no\"=$1 AND \"order_detail_no\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "clean: unable to delete from order_details")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "clean: failed to get rows affected by delete for order_details")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q orderDetailQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("clean: no orderDetailQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "clean: unable to delete all from order_details")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "clean: failed to get rows affected by deleteall for order_details")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrderDetailSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(orderDetailBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderDetailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"clean\".\"order_details\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, orderDetailPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "clean: unable to delete all from orderDetail slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "clean: failed to get rows affected by deleteall for order_details")
	}

	if len(orderDetailAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OrderDetail) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOrderDetail(ctx, exec, o.OrderNo, o.OrderDetailNo)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrderDetailSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrderDetailSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderDetailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"clean\".\"order_details\".* FROM \"clean\".\"order_details\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, orderDetailPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "clean: unable to reload all in OrderDetailSlice")
	}

	*o = slice

	return nil
}

// OrderDetailExists checks if the OrderDetail row exists.
func OrderDetailExists(ctx context.Context, exec boil.ContextExecutor, orderNo int, orderDetailNo int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"clean\".\"order_details\" where \"order_no\"=$1 AND \"order_detail_no\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, orderNo, orderDetailNo)
	}
	row := exec.QueryRowContext(ctx, sql, orderNo, orderDetailNo)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "clean: unable to check if order_details exists")
	}

	return exists, nil
}

// Exists checks if the OrderDetail row exists.
func (o *OrderDetail) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return OrderDetailExists(ctx, exec, o.OrderNo, o.OrderDetailNo)
}
