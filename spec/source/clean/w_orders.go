// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package clean

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// WOrder is an object representing the database table.
type WOrder struct {
	Register             null.Bool   `boil:"register" json:"register,omitempty" toml:"register" yaml:"register,omitempty"`
	Logging              null.Bool   `boil:"logging" json:"logging,omitempty" toml:"logging" yaml:"logging,omitempty"`
	WOrderNo             null.String `boil:"w_order_no" json:"w_order_no,omitempty" toml:"w_order_no" yaml:"w_order_no,omitempty"`
	OrderNo              null.Int    `boil:"order_no" json:"order_no,omitempty" toml:"order_no" yaml:"order_no,omitempty"`
	ChangeCount          null.Int64  `boil:"change_count" json:"change_count,omitempty" toml:"change_count" yaml:"change_count,omitempty"`
	OrderDate            null.Time   `boil:"order_date" json:"order_date,omitempty" toml:"order_date" yaml:"order_date,omitempty"`
	OperatorID           null.String `boil:"operator_id" json:"operator_id,omitempty" toml:"operator_id" yaml:"operator_id,omitempty"`
	OrderPic             null.String `boil:"order_pic" json:"order_pic,omitempty" toml:"order_pic" yaml:"order_pic,omitempty"`
	CustomerName         null.String `boil:"customer_name" json:"customer_name,omitempty" toml:"customer_name" yaml:"customer_name,omitempty"`
	WTotalOrderPrice     null.Int64  `boil:"w_total_order_price" json:"w_total_order_price,omitempty" toml:"w_total_order_price" yaml:"w_total_order_price,omitempty"`
	WRemainingOrderPrice null.Int64  `boil:"w_remaining_order_price" json:"w_remaining_order_price,omitempty" toml:"w_remaining_order_price" yaml:"w_remaining_order_price,omitempty"`
	IsShipped            null.Bool   `boil:"is_shipped" json:"is_shipped,omitempty" toml:"is_shipped" yaml:"is_shipped,omitempty"`
	IsRemaining          null.Bool   `boil:"is_remaining" json:"is_remaining,omitempty" toml:"is_remaining" yaml:"is_remaining,omitempty"`
}

var WOrderColumns = struct {
	Register             string
	Logging              string
	WOrderNo             string
	OrderNo              string
	ChangeCount          string
	OrderDate            string
	OperatorID           string
	OrderPic             string
	CustomerName         string
	WTotalOrderPrice     string
	WRemainingOrderPrice string
	IsShipped            string
	IsRemaining          string
}{
	Register:             "register",
	Logging:              "logging",
	WOrderNo:             "w_order_no",
	OrderNo:              "order_no",
	ChangeCount:          "change_count",
	OrderDate:            "order_date",
	OperatorID:           "operator_id",
	OrderPic:             "order_pic",
	CustomerName:         "customer_name",
	WTotalOrderPrice:     "w_total_order_price",
	WRemainingOrderPrice: "w_remaining_order_price",
	IsShipped:            "is_shipped",
	IsRemaining:          "is_remaining",
}

var WOrderTableColumns = struct {
	Register             string
	Logging              string
	WOrderNo             string
	OrderNo              string
	ChangeCount          string
	OrderDate            string
	OperatorID           string
	OrderPic             string
	CustomerName         string
	WTotalOrderPrice     string
	WRemainingOrderPrice string
	IsShipped            string
	IsRemaining          string
}{
	Register:             "w_orders.register",
	Logging:              "w_orders.logging",
	WOrderNo:             "w_orders.w_order_no",
	OrderNo:              "w_orders.order_no",
	ChangeCount:          "w_orders.change_count",
	OrderDate:            "w_orders.order_date",
	OperatorID:           "w_orders.operator_id",
	OrderPic:             "w_orders.order_pic",
	CustomerName:         "w_orders.customer_name",
	WTotalOrderPrice:     "w_orders.w_total_order_price",
	WRemainingOrderPrice: "w_orders.w_remaining_order_price",
	IsShipped:            "w_orders.is_shipped",
	IsRemaining:          "w_orders.is_remaining",
}

// Generated where

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var WOrderWhere = struct {
	Register             whereHelpernull_Bool
	Logging              whereHelpernull_Bool
	WOrderNo             whereHelpernull_String
	OrderNo              whereHelpernull_Int
	ChangeCount          whereHelpernull_Int64
	OrderDate            whereHelpernull_Time
	OperatorID           whereHelpernull_String
	OrderPic             whereHelpernull_String
	CustomerName         whereHelpernull_String
	WTotalOrderPrice     whereHelpernull_Int64
	WRemainingOrderPrice whereHelpernull_Int64
	IsShipped            whereHelpernull_Bool
	IsRemaining          whereHelpernull_Bool
}{
	Register:             whereHelpernull_Bool{field: "\"clean\".\"w_orders\".\"register\""},
	Logging:              whereHelpernull_Bool{field: "\"clean\".\"w_orders\".\"logging\""},
	WOrderNo:             whereHelpernull_String{field: "\"clean\".\"w_orders\".\"w_order_no\""},
	OrderNo:              whereHelpernull_Int{field: "\"clean\".\"w_orders\".\"order_no\""},
	ChangeCount:          whereHelpernull_Int64{field: "\"clean\".\"w_orders\".\"change_count\""},
	OrderDate:            whereHelpernull_Time{field: "\"clean\".\"w_orders\".\"order_date\""},
	OperatorID:           whereHelpernull_String{field: "\"clean\".\"w_orders\".\"operator_id\""},
	OrderPic:             whereHelpernull_String{field: "\"clean\".\"w_orders\".\"order_pic\""},
	CustomerName:         whereHelpernull_String{field: "\"clean\".\"w_orders\".\"customer_name\""},
	WTotalOrderPrice:     whereHelpernull_Int64{field: "\"clean\".\"w_orders\".\"w_total_order_price\""},
	WRemainingOrderPrice: whereHelpernull_Int64{field: "\"clean\".\"w_orders\".\"w_remaining_order_price\""},
	IsShipped:            whereHelpernull_Bool{field: "\"clean\".\"w_orders\".\"is_shipped\""},
	IsRemaining:          whereHelpernull_Bool{field: "\"clean\".\"w_orders\".\"is_remaining\""},
}

var (
	wOrderAllColumns            = []string{"register", "logging", "w_order_no", "order_no", "change_count", "order_date", "operator_id", "order_pic", "customer_name", "w_total_order_price", "w_remaining_order_price", "is_shipped", "is_remaining"}
	wOrderColumnsWithoutDefault = []string{}
	wOrderColumnsWithDefault    = []string{"register", "logging", "w_order_no", "order_no", "change_count", "order_date", "operator_id", "order_pic", "customer_name", "w_total_order_price", "w_remaining_order_price", "is_shipped", "is_remaining"}
	wOrderPrimaryKeyColumns     = []string{}
	wOrderGeneratedColumns      = []string{}
)

type (
	// WOrderSlice is an alias for a slice of pointers to WOrder.
	// This should almost always be used instead of []WOrder.
	WOrderSlice []*WOrder
	// WOrderHook is the signature for custom WOrder hook methods
	WOrderHook func(context.Context, boil.ContextExecutor, *WOrder) error

	wOrderQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	wOrderType           = reflect.TypeOf(&WOrder{})
	wOrderMapping        = queries.MakeStructMapping(wOrderType)
	wOrderInsertCacheMut sync.RWMutex
	wOrderInsertCache    = make(map[string]insertCache)
	wOrderUpdateCacheMut sync.RWMutex
	wOrderUpdateCache    = make(map[string]updateCache)
	wOrderUpsertCacheMut sync.RWMutex
	wOrderUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
	// These are used in some views
	_ = fmt.Sprintln("")
	_ = reflect.Int
	_ = strings.Builder{}
	_ = sync.Mutex{}
	_ = strmangle.Plural("")
	_ = strconv.IntSize
)

var wOrderAfterSelectMu sync.Mutex
var wOrderAfterSelectHooks []WOrderHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *WOrder) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wOrderAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddWOrderHook registers your hook function for all future operations.
func AddWOrderHook(hookPoint boil.HookPoint, wOrderHook WOrderHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		wOrderAfterSelectMu.Lock()
		wOrderAfterSelectHooks = append(wOrderAfterSelectHooks, wOrderHook)
		wOrderAfterSelectMu.Unlock()
	}
}

// One returns a single wOrder record from the query.
func (q wOrderQuery) One(ctx context.Context, exec boil.ContextExecutor) (*WOrder, error) {
	o := &WOrder{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "clean: failed to execute a one query for w_orders")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all WOrder records from the query.
func (q wOrderQuery) All(ctx context.Context, exec boil.ContextExecutor) (WOrderSlice, error) {
	var o []*WOrder

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "clean: failed to assign all query results to WOrder slice")
	}

	if len(wOrderAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all WOrder records in the query.
func (q wOrderQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "clean: failed to count w_orders rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q wOrderQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "clean: failed to check if w_orders exists")
	}

	return count > 0, nil
}

// WOrders retrieves all the records using an executor.
func WOrders(mods ...qm.QueryMod) wOrderQuery {
	mods = append(mods, qm.From("\"clean\".\"w_orders\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"clean\".\"w_orders\".*"})
	}

	return wOrderQuery{q}
}
