// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package source

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Operater is an object representing the database table.
type Operater struct { // 担当者ID
	OperatorID string `boil:"operator_id" json:"operator_id" toml:"operator_id" yaml:"operator_id"`
	// 担当者名
	OperatorName string `boil:"operator_name" json:"operator_name" toml:"operator_name" yaml:"operator_name"`
	// 作成日時
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	// 更新日時
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	// 作成者
	CreatedBy null.String `boil:"created_by" json:"created_by,omitempty" toml:"created_by" yaml:"created_by,omitempty"`
	// 更新者
	UpdatedBy null.String `boil:"updated_by" json:"updated_by,omitempty" toml:"updated_by" yaml:"updated_by,omitempty"`

	R *operaterR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L operaterL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OperaterColumns = struct {
	OperatorID   string
	OperatorName string
	CreatedAt    string
	UpdatedAt    string
	CreatedBy    string
	UpdatedBy    string
}{
	OperatorID:   "operator_id",
	OperatorName: "operator_name",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
	CreatedBy:    "created_by",
	UpdatedBy:    "updated_by",
}

var OperaterTableColumns = struct {
	OperatorID   string
	OperatorName string
	CreatedAt    string
	UpdatedAt    string
	CreatedBy    string
	UpdatedBy    string
}{
	OperatorID:   "operaters.operator_id",
	OperatorName: "operaters.operator_name",
	CreatedAt:    "operaters.created_at",
	UpdatedAt:    "operaters.updated_at",
	CreatedBy:    "operaters.created_by",
	UpdatedBy:    "operaters.updated_by",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod   { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var OperaterWhere = struct {
	OperatorID   whereHelperstring
	OperatorName whereHelperstring
	CreatedAt    whereHelpertime_Time
	UpdatedAt    whereHelpertime_Time
	CreatedBy    whereHelpernull_String
	UpdatedBy    whereHelpernull_String
}{
	OperatorID:   whereHelperstring{field: "\"source\".\"operaters\".\"operator_id\""},
	OperatorName: whereHelperstring{field: "\"source\".\"operaters\".\"operator_name\""},
	CreatedAt:    whereHelpertime_Time{field: "\"source\".\"operaters\".\"created_at\""},
	UpdatedAt:    whereHelpertime_Time{field: "\"source\".\"operaters\".\"updated_at\""},
	CreatedBy:    whereHelpernull_String{field: "\"source\".\"operaters\".\"created_by\""},
	UpdatedBy:    whereHelpernull_String{field: "\"source\".\"operaters\".\"updated_by\""},
}

// OperaterRels is where relationship names are stored.
var OperaterRels = struct {
}{}

// operaterR is where relationships are stored.
type operaterR struct {
}

// NewStruct creates a new relationship struct
func (*operaterR) NewStruct() *operaterR {
	return &operaterR{}
}

// operaterL is where Load methods for each relationship are stored.
type operaterL struct{}

var (
	operaterAllColumns            = []string{"operator_id", "operator_name", "created_at", "updated_at", "created_by", "updated_by"}
	operaterColumnsWithoutDefault = []string{"operator_id", "operator_name"}
	operaterColumnsWithDefault    = []string{"created_at", "updated_at", "created_by", "updated_by"}
	operaterPrimaryKeyColumns     = []string{"operator_id"}
	operaterGeneratedColumns      = []string{}
)

type (
	// OperaterSlice is an alias for a slice of pointers to Operater.
	// This should almost always be used instead of []Operater.
	OperaterSlice []*Operater
	// OperaterHook is the signature for custom Operater hook methods
	OperaterHook func(context.Context, boil.ContextExecutor, *Operater) error

	operaterQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	operaterType                 = reflect.TypeOf(&Operater{})
	operaterMapping              = queries.MakeStructMapping(operaterType)
	operaterPrimaryKeyMapping, _ = queries.BindMapping(operaterType, operaterMapping, operaterPrimaryKeyColumns)
	operaterInsertCacheMut       sync.RWMutex
	operaterInsertCache          = make(map[string]insertCache)
	operaterUpdateCacheMut       sync.RWMutex
	operaterUpdateCache          = make(map[string]updateCache)
	operaterUpsertCacheMut       sync.RWMutex
	operaterUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var operaterAfterSelectMu sync.Mutex
var operaterAfterSelectHooks []OperaterHook

var operaterBeforeInsertMu sync.Mutex
var operaterBeforeInsertHooks []OperaterHook
var operaterAfterInsertMu sync.Mutex
var operaterAfterInsertHooks []OperaterHook

var operaterBeforeUpdateMu sync.Mutex
var operaterBeforeUpdateHooks []OperaterHook
var operaterAfterUpdateMu sync.Mutex
var operaterAfterUpdateHooks []OperaterHook

var operaterBeforeDeleteMu sync.Mutex
var operaterBeforeDeleteHooks []OperaterHook
var operaterAfterDeleteMu sync.Mutex
var operaterAfterDeleteHooks []OperaterHook

var operaterBeforeUpsertMu sync.Mutex
var operaterBeforeUpsertHooks []OperaterHook
var operaterAfterUpsertMu sync.Mutex
var operaterAfterUpsertHooks []OperaterHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Operater) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range operaterAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Operater) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range operaterBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Operater) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range operaterAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Operater) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range operaterBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Operater) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range operaterAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Operater) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range operaterBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Operater) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range operaterAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Operater) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range operaterBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Operater) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range operaterAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOperaterHook registers your hook function for all future operations.
func AddOperaterHook(hookPoint boil.HookPoint, operaterHook OperaterHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		operaterAfterSelectMu.Lock()
		operaterAfterSelectHooks = append(operaterAfterSelectHooks, operaterHook)
		operaterAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		operaterBeforeInsertMu.Lock()
		operaterBeforeInsertHooks = append(operaterBeforeInsertHooks, operaterHook)
		operaterBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		operaterAfterInsertMu.Lock()
		operaterAfterInsertHooks = append(operaterAfterInsertHooks, operaterHook)
		operaterAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		operaterBeforeUpdateMu.Lock()
		operaterBeforeUpdateHooks = append(operaterBeforeUpdateHooks, operaterHook)
		operaterBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		operaterAfterUpdateMu.Lock()
		operaterAfterUpdateHooks = append(operaterAfterUpdateHooks, operaterHook)
		operaterAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		operaterBeforeDeleteMu.Lock()
		operaterBeforeDeleteHooks = append(operaterBeforeDeleteHooks, operaterHook)
		operaterBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		operaterAfterDeleteMu.Lock()
		operaterAfterDeleteHooks = append(operaterAfterDeleteHooks, operaterHook)
		operaterAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		operaterBeforeUpsertMu.Lock()
		operaterBeforeUpsertHooks = append(operaterBeforeUpsertHooks, operaterHook)
		operaterBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		operaterAfterUpsertMu.Lock()
		operaterAfterUpsertHooks = append(operaterAfterUpsertHooks, operaterHook)
		operaterAfterUpsertMu.Unlock()
	}
}

// OneG returns a single operater record from the query using the global executor.
func (q operaterQuery) OneG(ctx context.Context) (*Operater, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single operater record from the query.
func (q operaterQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Operater, error) {
	o := &Operater{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "source: failed to execute a one query for operaters")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Operater records from the query using the global executor.
func (q operaterQuery) AllG(ctx context.Context) (OperaterSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Operater records from the query.
func (q operaterQuery) All(ctx context.Context, exec boil.ContextExecutor) (OperaterSlice, error) {
	var o []*Operater

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "source: failed to assign all query results to Operater slice")
	}

	if len(operaterAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Operater records in the query using the global executor
func (q operaterQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Operater records in the query.
func (q operaterQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "source: failed to count operaters rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q operaterQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q operaterQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "source: failed to check if operaters exists")
	}

	return count > 0, nil
}

// Operaters retrieves all the records using an executor.
func Operaters(mods ...qm.QueryMod) operaterQuery {
	mods = append(mods, qm.From("\"source\".\"operaters\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"source\".\"operaters\".*"})
	}

	return operaterQuery{q}
}

// FindOperaterG retrieves a single record by ID.
func FindOperaterG(ctx context.Context, operatorID string, selectCols ...string) (*Operater, error) {
	return FindOperater(ctx, boil.GetContextDB(), operatorID, selectCols...)
}

// FindOperater retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOperater(ctx context.Context, exec boil.ContextExecutor, operatorID string, selectCols ...string) (*Operater, error) {
	operaterObj := &Operater{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"source\".\"operaters\" where \"operator_id\"=$1", sel,
	)

	q := queries.Raw(query, operatorID)

	err := q.Bind(ctx, exec, operaterObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "source: unable to select from operaters")
	}

	if err = operaterObj.doAfterSelectHooks(ctx, exec); err != nil {
		return operaterObj, err
	}

	return operaterObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Operater) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Operater) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("source: no operaters provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(operaterColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	operaterInsertCacheMut.RLock()
	cache, cached := operaterInsertCache[key]
	operaterInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			operaterAllColumns,
			operaterColumnsWithDefault,
			operaterColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(operaterType, operaterMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(operaterType, operaterMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"source\".\"operaters\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"source\".\"operaters\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "source: unable to insert into operaters")
	}

	if !cached {
		operaterInsertCacheMut.Lock()
		operaterInsertCache[key] = cache
		operaterInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Operater record using the global executor.
// See Update for more documentation.
func (o *Operater) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Operater.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Operater) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	operaterUpdateCacheMut.RLock()
	cache, cached := operaterUpdateCache[key]
	operaterUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			operaterAllColumns,
			operaterPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("source: unable to update operaters, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"source\".\"operaters\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, operaterPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(operaterType, operaterMapping, append(wl, operaterPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "source: unable to update operaters row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "source: failed to get rows affected by update for operaters")
	}

	if !cached {
		operaterUpdateCacheMut.Lock()
		operaterUpdateCache[key] = cache
		operaterUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q operaterQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q operaterQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "source: unable to update all for operaters")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "source: unable to retrieve rows affected for operaters")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o OperaterSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OperaterSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("source: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), operaterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"source\".\"operaters\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, operaterPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "source: unable to update all in operater slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "source: unable to retrieve rows affected all in update all operater")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Operater) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Operater) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("source: no operaters provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(operaterColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	operaterUpsertCacheMut.RLock()
	cache, cached := operaterUpsertCache[key]
	operaterUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			operaterAllColumns,
			operaterColumnsWithDefault,
			operaterColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			operaterAllColumns,
			operaterPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("source: unable to upsert operaters, could not build update column list")
		}

		ret := strmangle.SetComplement(operaterAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(operaterPrimaryKeyColumns) == 0 {
				return errors.New("source: unable to upsert operaters, could not build conflict column list")
			}

			conflict = make([]string, len(operaterPrimaryKeyColumns))
			copy(conflict, operaterPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"source\".\"operaters\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(operaterType, operaterMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(operaterType, operaterMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "source: unable to upsert operaters")
	}

	if !cached {
		operaterUpsertCacheMut.Lock()
		operaterUpsertCache[key] = cache
		operaterUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Operater record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Operater) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Operater record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Operater) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("source: no Operater provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), operaterPrimaryKeyMapping)
	sql := "DELETE FROM \"source\".\"operaters\" WHERE \"operator_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "source: unable to delete from operaters")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "source: failed to get rows affected by delete for operaters")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q operaterQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q operaterQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("source: no operaterQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "source: unable to delete all from operaters")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "source: failed to get rows affected by deleteall for operaters")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o OperaterSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OperaterSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(operaterBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), operaterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"source\".\"operaters\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, operaterPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "source: unable to delete all from operater slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "source: failed to get rows affected by deleteall for operaters")
	}

	if len(operaterAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Operater) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("source: no Operater provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Operater) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOperater(ctx, exec, o.OperatorID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OperaterSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("source: empty OperaterSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OperaterSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OperaterSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), operaterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"source\".\"operaters\".* FROM \"source\".\"operaters\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, operaterPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "source: unable to reload all in OperaterSlice")
	}

	*o = slice

	return nil
}

// OperaterExistsG checks if the Operater row exists.
func OperaterExistsG(ctx context.Context, operatorID string) (bool, error) {
	return OperaterExists(ctx, boil.GetContextDB(), operatorID)
}

// OperaterExists checks if the Operater row exists.
func OperaterExists(ctx context.Context, exec boil.ContextExecutor, operatorID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"source\".\"operaters\" where \"operator_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, operatorID)
	}
	row := exec.QueryRowContext(ctx, sql, operatorID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "source: unable to check if operaters exists")
	}

	return exists, nil
}

// Exists checks if the Operater row exists.
func (o *Operater) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return OperaterExists(ctx, exec, o.OperatorID)
}
