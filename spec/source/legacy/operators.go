// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package legacy

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Operator is an object representing the database table.
type Operator struct { // 担当者ID
	OperatorID string `boil:"operator_id" json:"operator_id" toml:"operator_id" yaml:"operator_id"`
	// 担当者名
	OperatorName string `boil:"operator_name" json:"operator_name" toml:"operator_name" yaml:"operator_name"`

	R *operatorR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L operatorL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OperatorColumns = struct {
	OperatorID   string
	OperatorName string
}{
	OperatorID:   "operator_id",
	OperatorName: "operator_name",
}

var OperatorTableColumns = struct {
	OperatorID   string
	OperatorName string
}{
	OperatorID:   "operators.operator_id",
	OperatorName: "operators.operator_name",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod  { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var OperatorWhere = struct {
	OperatorID   whereHelperstring
	OperatorName whereHelperstring
}{
	OperatorID:   whereHelperstring{field: "`operators`.`operator_id`"},
	OperatorName: whereHelperstring{field: "`operators`.`operator_name`"},
}

// OperatorRels is where relationship names are stored.
var OperatorRels = struct {
}{}

// operatorR is where relationships are stored.
type operatorR struct {
}

// NewStruct creates a new relationship struct
func (*operatorR) NewStruct() *operatorR {
	return &operatorR{}
}

// operatorL is where Load methods for each relationship are stored.
type operatorL struct{}

var (
	operatorAllColumns            = []string{"operator_id", "operator_name"}
	operatorColumnsWithoutDefault = []string{"operator_id", "operator_name"}
	operatorColumnsWithDefault    = []string{}
	operatorPrimaryKeyColumns     = []string{"operator_id"}
	operatorGeneratedColumns      = []string{}
)

type (
	// OperatorSlice is an alias for a slice of pointers to Operator.
	// This should almost always be used instead of []Operator.
	OperatorSlice []*Operator
	// OperatorHook is the signature for custom Operator hook methods
	OperatorHook func(context.Context, boil.ContextExecutor, *Operator) error

	operatorQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	operatorType                 = reflect.TypeOf(&Operator{})
	operatorMapping              = queries.MakeStructMapping(operatorType)
	operatorPrimaryKeyMapping, _ = queries.BindMapping(operatorType, operatorMapping, operatorPrimaryKeyColumns)
	operatorInsertCacheMut       sync.RWMutex
	operatorInsertCache          = make(map[string]insertCache)
	operatorUpdateCacheMut       sync.RWMutex
	operatorUpdateCache          = make(map[string]updateCache)
	operatorUpsertCacheMut       sync.RWMutex
	operatorUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var operatorAfterSelectMu sync.Mutex
var operatorAfterSelectHooks []OperatorHook

var operatorBeforeInsertMu sync.Mutex
var operatorBeforeInsertHooks []OperatorHook
var operatorAfterInsertMu sync.Mutex
var operatorAfterInsertHooks []OperatorHook

var operatorBeforeUpdateMu sync.Mutex
var operatorBeforeUpdateHooks []OperatorHook
var operatorAfterUpdateMu sync.Mutex
var operatorAfterUpdateHooks []OperatorHook

var operatorBeforeDeleteMu sync.Mutex
var operatorBeforeDeleteHooks []OperatorHook
var operatorAfterDeleteMu sync.Mutex
var operatorAfterDeleteHooks []OperatorHook

var operatorBeforeUpsertMu sync.Mutex
var operatorBeforeUpsertHooks []OperatorHook
var operatorAfterUpsertMu sync.Mutex
var operatorAfterUpsertHooks []OperatorHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Operator) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range operatorAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Operator) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range operatorBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Operator) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range operatorAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Operator) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range operatorBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Operator) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range operatorAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Operator) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range operatorBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Operator) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range operatorAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Operator) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range operatorBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Operator) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range operatorAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOperatorHook registers your hook function for all future operations.
func AddOperatorHook(hookPoint boil.HookPoint, operatorHook OperatorHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		operatorAfterSelectMu.Lock()
		operatorAfterSelectHooks = append(operatorAfterSelectHooks, operatorHook)
		operatorAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		operatorBeforeInsertMu.Lock()
		operatorBeforeInsertHooks = append(operatorBeforeInsertHooks, operatorHook)
		operatorBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		operatorAfterInsertMu.Lock()
		operatorAfterInsertHooks = append(operatorAfterInsertHooks, operatorHook)
		operatorAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		operatorBeforeUpdateMu.Lock()
		operatorBeforeUpdateHooks = append(operatorBeforeUpdateHooks, operatorHook)
		operatorBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		operatorAfterUpdateMu.Lock()
		operatorAfterUpdateHooks = append(operatorAfterUpdateHooks, operatorHook)
		operatorAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		operatorBeforeDeleteMu.Lock()
		operatorBeforeDeleteHooks = append(operatorBeforeDeleteHooks, operatorHook)
		operatorBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		operatorAfterDeleteMu.Lock()
		operatorAfterDeleteHooks = append(operatorAfterDeleteHooks, operatorHook)
		operatorAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		operatorBeforeUpsertMu.Lock()
		operatorBeforeUpsertHooks = append(operatorBeforeUpsertHooks, operatorHook)
		operatorBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		operatorAfterUpsertMu.Lock()
		operatorAfterUpsertHooks = append(operatorAfterUpsertHooks, operatorHook)
		operatorAfterUpsertMu.Unlock()
	}
}

// One returns a single operator record from the query.
func (q operatorQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Operator, error) {
	o := &Operator{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "legacy: failed to execute a one query for operators")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Operator records from the query.
func (q operatorQuery) All(ctx context.Context, exec boil.ContextExecutor) (OperatorSlice, error) {
	var o []*Operator

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "legacy: failed to assign all query results to Operator slice")
	}

	if len(operatorAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Operator records in the query.
func (q operatorQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "legacy: failed to count operators rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q operatorQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "legacy: failed to check if operators exists")
	}

	return count > 0, nil
}

// Operators retrieves all the records using an executor.
func Operators(mods ...qm.QueryMod) operatorQuery {
	mods = append(mods, qm.From("`operators`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`operators`.*"})
	}

	return operatorQuery{q}
}

// FindOperator retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOperator(ctx context.Context, exec boil.ContextExecutor, operatorID string, selectCols ...string) (*Operator, error) {
	operatorObj := &Operator{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `operators` where `operator_id`=?", sel,
	)

	q := queries.Raw(query, operatorID)

	err := q.Bind(ctx, exec, operatorObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "legacy: unable to select from operators")
	}

	if err = operatorObj.doAfterSelectHooks(ctx, exec); err != nil {
		return operatorObj, err
	}

	return operatorObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Operator) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("legacy: no operators provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(operatorColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	operatorInsertCacheMut.RLock()
	cache, cached := operatorInsertCache[key]
	operatorInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			operatorAllColumns,
			operatorColumnsWithDefault,
			operatorColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(operatorType, operatorMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(operatorType, operatorMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `operators` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `operators` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `operators` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, operatorPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "legacy: unable to insert into operators")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.OperatorID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "legacy: unable to populate default values for operators")
	}

CacheNoHooks:
	if !cached {
		operatorInsertCacheMut.Lock()
		operatorInsertCache[key] = cache
		operatorInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Operator.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Operator) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	operatorUpdateCacheMut.RLock()
	cache, cached := operatorUpdateCache[key]
	operatorUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			operatorAllColumns,
			operatorPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("legacy: unable to update operators, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `operators` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, operatorPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(operatorType, operatorMapping, append(wl, operatorPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "legacy: unable to update operators row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "legacy: failed to get rows affected by update for operators")
	}

	if !cached {
		operatorUpdateCacheMut.Lock()
		operatorUpdateCache[key] = cache
		operatorUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q operatorQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "legacy: unable to update all for operators")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "legacy: unable to retrieve rows affected for operators")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OperatorSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("legacy: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), operatorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `operators` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, operatorPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "legacy: unable to update all in operator slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "legacy: unable to retrieve rows affected all in update all operator")
	}
	return rowsAff, nil
}

var mySQLOperatorUniqueColumns = []string{
	"operator_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Operator) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("legacy: no operators provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(operatorColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLOperatorUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	operatorUpsertCacheMut.RLock()
	cache, cached := operatorUpsertCache[key]
	operatorUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			operatorAllColumns,
			operatorColumnsWithDefault,
			operatorColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			operatorAllColumns,
			operatorPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("legacy: unable to upsert operators, could not build update column list")
		}

		ret := strmangle.SetComplement(operatorAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`operators`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `operators` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(operatorType, operatorMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(operatorType, operatorMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "legacy: unable to upsert for operators")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(operatorType, operatorMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "legacy: unable to retrieve unique values for operators")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "legacy: unable to populate default values for operators")
	}

CacheNoHooks:
	if !cached {
		operatorUpsertCacheMut.Lock()
		operatorUpsertCache[key] = cache
		operatorUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Operator record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Operator) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("legacy: no Operator provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), operatorPrimaryKeyMapping)
	sql := "DELETE FROM `operators` WHERE `operator_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "legacy: unable to delete from operators")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "legacy: failed to get rows affected by delete for operators")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q operatorQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("legacy: no operatorQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "legacy: unable to delete all from operators")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "legacy: failed to get rows affected by deleteall for operators")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OperatorSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(operatorBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), operatorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `operators` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, operatorPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "legacy: unable to delete all from operator slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "legacy: failed to get rows affected by deleteall for operators")
	}

	if len(operatorAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Operator) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOperator(ctx, exec, o.OperatorID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OperatorSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OperatorSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), operatorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `operators`.* FROM `operators` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, operatorPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "legacy: unable to reload all in OperatorSlice")
	}

	*o = slice

	return nil
}

// OperatorExists checks if the Operator row exists.
func OperatorExists(ctx context.Context, exec boil.ContextExecutor, operatorID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `operators` where `operator_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, operatorID)
	}
	row := exec.QueryRowContext(ctx, sql, operatorID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "legacy: unable to check if operators exists")
	}

	return exists, nil
}

// Exists checks if the Operator row exists.
func (o *Operator) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return OperatorExists(ctx, exec, o.OperatorID)
}
