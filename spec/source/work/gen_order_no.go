// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package work

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// GenOrderNo is an object representing the database table.
type GenOrderNo struct { // 受注番号(WORK)
	OrderNow string `boil:"order_now" json:"order_now" toml:"order_now" yaml:"order_now"`
	// 商品ID(WORK)
	ProductIdw string `boil:"product_idw" json:"product_idw" toml:"product_idw" yaml:"product_idw"`
	// 受注番号
	OrderNo int `boil:"order_no" json:"order_no" toml:"order_no" yaml:"order_no"`
	// 受注明細番号
	OrderDetailNo int `boil:"order_detail_no" json:"order_detail_no" toml:"order_detail_no" yaml:"order_detail_no"`
	// 作成日時
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	// 更新日時
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	// 作成者
	CreatedBy null.String `boil:"created_by" json:"created_by,omitempty" toml:"created_by" yaml:"created_by,omitempty"`
	// 更新者
	UpdatedBy null.String `boil:"updated_by" json:"updated_by,omitempty" toml:"updated_by" yaml:"updated_by,omitempty"`

	R *genOrderNoR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L genOrderNoL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GenOrderNoColumns = struct {
	OrderNow      string
	ProductIdw    string
	OrderNo       string
	OrderDetailNo string
	CreatedAt     string
	UpdatedAt     string
	CreatedBy     string
	UpdatedBy     string
}{
	OrderNow:      "order_now",
	ProductIdw:    "product_idw",
	OrderNo:       "order_no",
	OrderDetailNo: "order_detail_no",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
	CreatedBy:     "created_by",
	UpdatedBy:     "updated_by",
}

var GenOrderNoTableColumns = struct {
	OrderNow      string
	ProductIdw    string
	OrderNo       string
	OrderDetailNo string
	CreatedAt     string
	UpdatedAt     string
	CreatedBy     string
	UpdatedBy     string
}{
	OrderNow:      "gen_order_no.order_now",
	ProductIdw:    "gen_order_no.product_idw",
	OrderNo:       "gen_order_no.order_no",
	OrderDetailNo: "gen_order_no.order_detail_no",
	CreatedAt:     "gen_order_no.created_at",
	UpdatedAt:     "gen_order_no.updated_at",
	CreatedBy:     "gen_order_no.created_by",
	UpdatedBy:     "gen_order_no.updated_by",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod   { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var GenOrderNoWhere = struct {
	OrderNow      whereHelperstring
	ProductIdw    whereHelperstring
	OrderNo       whereHelperint
	OrderDetailNo whereHelperint
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpertime_Time
	CreatedBy     whereHelpernull_String
	UpdatedBy     whereHelpernull_String
}{
	OrderNow:      whereHelperstring{field: "\"work\".\"gen_order_no\".\"order_now\""},
	ProductIdw:    whereHelperstring{field: "\"work\".\"gen_order_no\".\"product_idw\""},
	OrderNo:       whereHelperint{field: "\"work\".\"gen_order_no\".\"order_no\""},
	OrderDetailNo: whereHelperint{field: "\"work\".\"gen_order_no\".\"order_detail_no\""},
	CreatedAt:     whereHelpertime_Time{field: "\"work\".\"gen_order_no\".\"created_at\""},
	UpdatedAt:     whereHelpertime_Time{field: "\"work\".\"gen_order_no\".\"updated_at\""},
	CreatedBy:     whereHelpernull_String{field: "\"work\".\"gen_order_no\".\"created_by\""},
	UpdatedBy:     whereHelpernull_String{field: "\"work\".\"gen_order_no\".\"updated_by\""},
}

// GenOrderNoRels is where relationship names are stored.
var GenOrderNoRels = struct {
	ProductIdwGenProductID string
}{
	ProductIdwGenProductID: "ProductIdwGenProductID",
}

// genOrderNoR is where relationships are stored.
type genOrderNoR struct {
	ProductIdwGenProductID *GenProductID `boil:"ProductIdwGenProductID" json:"ProductIdwGenProductID" toml:"ProductIdwGenProductID" yaml:"ProductIdwGenProductID"`
}

// NewStruct creates a new relationship struct
func (*genOrderNoR) NewStruct() *genOrderNoR {
	return &genOrderNoR{}
}

func (r *genOrderNoR) GetProductIdwGenProductID() *GenProductID {
	if r == nil {
		return nil
	}
	return r.ProductIdwGenProductID
}

// genOrderNoL is where Load methods for each relationship are stored.
type genOrderNoL struct{}

var (
	genOrderNoAllColumns            = []string{"order_now", "product_idw", "order_no", "order_detail_no", "created_at", "updated_at", "created_by", "updated_by"}
	genOrderNoColumnsWithoutDefault = []string{"order_now", "product_idw", "order_no", "order_detail_no"}
	genOrderNoColumnsWithDefault    = []string{"created_at", "updated_at", "created_by", "updated_by"}
	genOrderNoPrimaryKeyColumns     = []string{"order_now", "product_idw"}
	genOrderNoGeneratedColumns      = []string{}
)

type (
	// GenOrderNoSlice is an alias for a slice of pointers to GenOrderNo.
	// This should almost always be used instead of []GenOrderNo.
	GenOrderNoSlice []*GenOrderNo
	// GenOrderNoHook is the signature for custom GenOrderNo hook methods
	GenOrderNoHook func(context.Context, boil.ContextExecutor, *GenOrderNo) error

	genOrderNoQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	genOrderNoType                 = reflect.TypeOf(&GenOrderNo{})
	genOrderNoMapping              = queries.MakeStructMapping(genOrderNoType)
	genOrderNoPrimaryKeyMapping, _ = queries.BindMapping(genOrderNoType, genOrderNoMapping, genOrderNoPrimaryKeyColumns)
	genOrderNoInsertCacheMut       sync.RWMutex
	genOrderNoInsertCache          = make(map[string]insertCache)
	genOrderNoUpdateCacheMut       sync.RWMutex
	genOrderNoUpdateCache          = make(map[string]updateCache)
	genOrderNoUpsertCacheMut       sync.RWMutex
	genOrderNoUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var genOrderNoAfterSelectMu sync.Mutex
var genOrderNoAfterSelectHooks []GenOrderNoHook

var genOrderNoBeforeInsertMu sync.Mutex
var genOrderNoBeforeInsertHooks []GenOrderNoHook
var genOrderNoAfterInsertMu sync.Mutex
var genOrderNoAfterInsertHooks []GenOrderNoHook

var genOrderNoBeforeUpdateMu sync.Mutex
var genOrderNoBeforeUpdateHooks []GenOrderNoHook
var genOrderNoAfterUpdateMu sync.Mutex
var genOrderNoAfterUpdateHooks []GenOrderNoHook

var genOrderNoBeforeDeleteMu sync.Mutex
var genOrderNoBeforeDeleteHooks []GenOrderNoHook
var genOrderNoAfterDeleteMu sync.Mutex
var genOrderNoAfterDeleteHooks []GenOrderNoHook

var genOrderNoBeforeUpsertMu sync.Mutex
var genOrderNoBeforeUpsertHooks []GenOrderNoHook
var genOrderNoAfterUpsertMu sync.Mutex
var genOrderNoAfterUpsertHooks []GenOrderNoHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GenOrderNo) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range genOrderNoAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GenOrderNo) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range genOrderNoBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GenOrderNo) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range genOrderNoAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *GenOrderNo) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range genOrderNoBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *GenOrderNo) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range genOrderNoAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *GenOrderNo) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range genOrderNoBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *GenOrderNo) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range genOrderNoAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GenOrderNo) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range genOrderNoBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GenOrderNo) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range genOrderNoAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGenOrderNoHook registers your hook function for all future operations.
func AddGenOrderNoHook(hookPoint boil.HookPoint, genOrderNoHook GenOrderNoHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		genOrderNoAfterSelectMu.Lock()
		genOrderNoAfterSelectHooks = append(genOrderNoAfterSelectHooks, genOrderNoHook)
		genOrderNoAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		genOrderNoBeforeInsertMu.Lock()
		genOrderNoBeforeInsertHooks = append(genOrderNoBeforeInsertHooks, genOrderNoHook)
		genOrderNoBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		genOrderNoAfterInsertMu.Lock()
		genOrderNoAfterInsertHooks = append(genOrderNoAfterInsertHooks, genOrderNoHook)
		genOrderNoAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		genOrderNoBeforeUpdateMu.Lock()
		genOrderNoBeforeUpdateHooks = append(genOrderNoBeforeUpdateHooks, genOrderNoHook)
		genOrderNoBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		genOrderNoAfterUpdateMu.Lock()
		genOrderNoAfterUpdateHooks = append(genOrderNoAfterUpdateHooks, genOrderNoHook)
		genOrderNoAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		genOrderNoBeforeDeleteMu.Lock()
		genOrderNoBeforeDeleteHooks = append(genOrderNoBeforeDeleteHooks, genOrderNoHook)
		genOrderNoBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		genOrderNoAfterDeleteMu.Lock()
		genOrderNoAfterDeleteHooks = append(genOrderNoAfterDeleteHooks, genOrderNoHook)
		genOrderNoAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		genOrderNoBeforeUpsertMu.Lock()
		genOrderNoBeforeUpsertHooks = append(genOrderNoBeforeUpsertHooks, genOrderNoHook)
		genOrderNoBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		genOrderNoAfterUpsertMu.Lock()
		genOrderNoAfterUpsertHooks = append(genOrderNoAfterUpsertHooks, genOrderNoHook)
		genOrderNoAfterUpsertMu.Unlock()
	}
}

// OneG returns a single genOrderNo record from the query using the global executor.
func (q genOrderNoQuery) OneG(ctx context.Context) (*GenOrderNo, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single genOrderNo record from the query.
func (q genOrderNoQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GenOrderNo, error) {
	o := &GenOrderNo{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "work: failed to execute a one query for gen_order_no")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all GenOrderNo records from the query using the global executor.
func (q genOrderNoQuery) AllG(ctx context.Context) (GenOrderNoSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all GenOrderNo records from the query.
func (q genOrderNoQuery) All(ctx context.Context, exec boil.ContextExecutor) (GenOrderNoSlice, error) {
	var o []*GenOrderNo

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "work: failed to assign all query results to GenOrderNo slice")
	}

	if len(genOrderNoAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all GenOrderNo records in the query using the global executor
func (q genOrderNoQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all GenOrderNo records in the query.
func (q genOrderNoQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "work: failed to count gen_order_no rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q genOrderNoQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q genOrderNoQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "work: failed to check if gen_order_no exists")
	}

	return count > 0, nil
}

// ProductIdwGenProductID pointed to by the foreign key.
func (o *GenOrderNo) ProductIdwGenProductID(mods ...qm.QueryMod) genProductIDQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"product_idw\" = ?", o.ProductIdw),
	}

	queryMods = append(queryMods, mods...)

	return GenProductIds(queryMods...)
}

// LoadProductIdwGenProductID allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (genOrderNoL) LoadProductIdwGenProductID(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGenOrderNo interface{}, mods queries.Applicator) error {
	var slice []*GenOrderNo
	var object *GenOrderNo

	if singular {
		var ok bool
		object, ok = maybeGenOrderNo.(*GenOrderNo)
		if !ok {
			object = new(GenOrderNo)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGenOrderNo)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGenOrderNo))
			}
		}
	} else {
		s, ok := maybeGenOrderNo.(*[]*GenOrderNo)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGenOrderNo)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGenOrderNo))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &genOrderNoR{}
		}
		args[object.ProductIdw] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &genOrderNoR{}
			}

			args[obj.ProductIdw] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`work.gen_product_id`),
		qm.WhereIn(`work.gen_product_id.product_idw in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load GenProductID")
	}

	var resultSlice []*GenProductID
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice GenProductID")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for gen_product_id")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for gen_product_id")
	}

	if len(genProductIDAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductIdwGenProductID = foreign
		if foreign.R == nil {
			foreign.R = &genProductIDR{}
		}
		foreign.R.ProductIdwGenOrderNos = append(foreign.R.ProductIdwGenOrderNos, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductIdw == foreign.ProductIdw {
				local.R.ProductIdwGenProductID = foreign
				if foreign.R == nil {
					foreign.R = &genProductIDR{}
				}
				foreign.R.ProductIdwGenOrderNos = append(foreign.R.ProductIdwGenOrderNos, local)
				break
			}
		}
	}

	return nil
}

// SetProductIdwGenProductIDG of the genOrderNo to the related item.
// Sets o.R.ProductIdwGenProductID to related.
// Adds o to related.R.ProductIdwGenOrderNos.
// Uses the global database handle.
func (o *GenOrderNo) SetProductIdwGenProductIDG(ctx context.Context, insert bool, related *GenProductID) error {
	return o.SetProductIdwGenProductID(ctx, boil.GetContextDB(), insert, related)
}

// SetProductIdwGenProductID of the genOrderNo to the related item.
// Sets o.R.ProductIdwGenProductID to related.
// Adds o to related.R.ProductIdwGenOrderNos.
func (o *GenOrderNo) SetProductIdwGenProductID(ctx context.Context, exec boil.ContextExecutor, insert bool, related *GenProductID) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"work\".\"gen_order_no\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"product_idw"}),
		strmangle.WhereClause("\"", "\"", 2, genOrderNoPrimaryKeyColumns),
	)
	values := []interface{}{related.ProductIdw, o.OrderNow, o.ProductIdw}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductIdw = related.ProductIdw
	if o.R == nil {
		o.R = &genOrderNoR{
			ProductIdwGenProductID: related,
		}
	} else {
		o.R.ProductIdwGenProductID = related
	}

	if related.R == nil {
		related.R = &genProductIDR{
			ProductIdwGenOrderNos: GenOrderNoSlice{o},
		}
	} else {
		related.R.ProductIdwGenOrderNos = append(related.R.ProductIdwGenOrderNos, o)
	}

	return nil
}

// GenOrderNos retrieves all the records using an executor.
func GenOrderNos(mods ...qm.QueryMod) genOrderNoQuery {
	mods = append(mods, qm.From("\"work\".\"gen_order_no\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"work\".\"gen_order_no\".*"})
	}

	return genOrderNoQuery{q}
}

// FindGenOrderNoG retrieves a single record by ID.
func FindGenOrderNoG(ctx context.Context, orderNow string, productIdw string, selectCols ...string) (*GenOrderNo, error) {
	return FindGenOrderNo(ctx, boil.GetContextDB(), orderNow, productIdw, selectCols...)
}

// FindGenOrderNo retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGenOrderNo(ctx context.Context, exec boil.ContextExecutor, orderNow string, productIdw string, selectCols ...string) (*GenOrderNo, error) {
	genOrderNoObj := &GenOrderNo{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"work\".\"gen_order_no\" where \"order_now\"=$1 AND \"product_idw\"=$2", sel,
	)

	q := queries.Raw(query, orderNow, productIdw)

	err := q.Bind(ctx, exec, genOrderNoObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "work: unable to select from gen_order_no")
	}

	if err = genOrderNoObj.doAfterSelectHooks(ctx, exec); err != nil {
		return genOrderNoObj, err
	}

	return genOrderNoObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *GenOrderNo) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GenOrderNo) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("work: no gen_order_no provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(genOrderNoColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	genOrderNoInsertCacheMut.RLock()
	cache, cached := genOrderNoInsertCache[key]
	genOrderNoInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			genOrderNoAllColumns,
			genOrderNoColumnsWithDefault,
			genOrderNoColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(genOrderNoType, genOrderNoMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(genOrderNoType, genOrderNoMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"work\".\"gen_order_no\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"work\".\"gen_order_no\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "work: unable to insert into gen_order_no")
	}

	if !cached {
		genOrderNoInsertCacheMut.Lock()
		genOrderNoInsertCache[key] = cache
		genOrderNoInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single GenOrderNo record using the global executor.
// See Update for more documentation.
func (o *GenOrderNo) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the GenOrderNo.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GenOrderNo) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	genOrderNoUpdateCacheMut.RLock()
	cache, cached := genOrderNoUpdateCache[key]
	genOrderNoUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			genOrderNoAllColumns,
			genOrderNoPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("work: unable to update gen_order_no, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"work\".\"gen_order_no\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, genOrderNoPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(genOrderNoType, genOrderNoMapping, append(wl, genOrderNoPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "work: unable to update gen_order_no row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "work: failed to get rows affected by update for gen_order_no")
	}

	if !cached {
		genOrderNoUpdateCacheMut.Lock()
		genOrderNoUpdateCache[key] = cache
		genOrderNoUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q genOrderNoQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q genOrderNoQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "work: unable to update all for gen_order_no")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "work: unable to retrieve rows affected for gen_order_no")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o GenOrderNoSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GenOrderNoSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("work: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), genOrderNoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"work\".\"gen_order_no\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, genOrderNoPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "work: unable to update all in genOrderNo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "work: unable to retrieve rows affected all in update all genOrderNo")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *GenOrderNo) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GenOrderNo) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("work: no gen_order_no provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(genOrderNoColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	genOrderNoUpsertCacheMut.RLock()
	cache, cached := genOrderNoUpsertCache[key]
	genOrderNoUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			genOrderNoAllColumns,
			genOrderNoColumnsWithDefault,
			genOrderNoColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			genOrderNoAllColumns,
			genOrderNoPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("work: unable to upsert gen_order_no, could not build update column list")
		}

		ret := strmangle.SetComplement(genOrderNoAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(genOrderNoPrimaryKeyColumns) == 0 {
				return errors.New("work: unable to upsert gen_order_no, could not build conflict column list")
			}

			conflict = make([]string, len(genOrderNoPrimaryKeyColumns))
			copy(conflict, genOrderNoPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"work\".\"gen_order_no\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(genOrderNoType, genOrderNoMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(genOrderNoType, genOrderNoMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "work: unable to upsert gen_order_no")
	}

	if !cached {
		genOrderNoUpsertCacheMut.Lock()
		genOrderNoUpsertCache[key] = cache
		genOrderNoUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single GenOrderNo record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *GenOrderNo) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single GenOrderNo record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GenOrderNo) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("work: no GenOrderNo provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), genOrderNoPrimaryKeyMapping)
	sql := "DELETE FROM \"work\".\"gen_order_no\" WHERE \"order_now\"=$1 AND \"product_idw\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "work: unable to delete from gen_order_no")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "work: failed to get rows affected by delete for gen_order_no")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q genOrderNoQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q genOrderNoQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("work: no genOrderNoQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "work: unable to delete all from gen_order_no")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "work: failed to get rows affected by deleteall for gen_order_no")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o GenOrderNoSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GenOrderNoSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(genOrderNoBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), genOrderNoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"work\".\"gen_order_no\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, genOrderNoPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "work: unable to delete all from genOrderNo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "work: failed to get rows affected by deleteall for gen_order_no")
	}

	if len(genOrderNoAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *GenOrderNo) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("work: no GenOrderNo provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GenOrderNo) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGenOrderNo(ctx, exec, o.OrderNow, o.ProductIdw)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GenOrderNoSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("work: empty GenOrderNoSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GenOrderNoSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GenOrderNoSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), genOrderNoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"work\".\"gen_order_no\".* FROM \"work\".\"gen_order_no\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, genOrderNoPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "work: unable to reload all in GenOrderNoSlice")
	}

	*o = slice

	return nil
}

// GenOrderNoExistsG checks if the GenOrderNo row exists.
func GenOrderNoExistsG(ctx context.Context, orderNow string, productIdw string) (bool, error) {
	return GenOrderNoExists(ctx, boil.GetContextDB(), orderNow, productIdw)
}

// GenOrderNoExists checks if the GenOrderNo row exists.
func GenOrderNoExists(ctx context.Context, exec boil.ContextExecutor, orderNow string, productIdw string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"work\".\"gen_order_no\" where \"order_now\"=$1 AND \"product_idw\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, orderNow, productIdw)
	}
	row := exec.QueryRowContext(ctx, sql, orderNow, productIdw)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "work: unable to check if gen_order_no exists")
	}

	return exists, nil
}

// Exists checks if the GenOrderNo row exists.
func (o *GenOrderNo) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return GenOrderNoExists(ctx, exec, o.OrderNow, o.ProductIdw)
}
