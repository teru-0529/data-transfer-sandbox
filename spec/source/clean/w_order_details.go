// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package clean

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// WOrderDetail is an object representing the database table.
type WOrderDetail struct {
	Register           null.Bool   `boil:"register" json:"register,omitempty" toml:"register" yaml:"register,omitempty"`
	WOrderNo           null.String `boil:"w_order_no" json:"w_order_no,omitempty" toml:"w_order_no" yaml:"w_order_no,omitempty"`
	OrderNo            null.Int    `boil:"order_no" json:"order_no,omitempty" toml:"order_no" yaml:"order_no,omitempty"`
	AggregatedDetails  null.String `boil:"aggregated_details" json:"aggregated_details,omitempty" toml:"aggregated_details" yaml:"aggregated_details,omitempty"`
	DetailCount        null.Int64  `boil:"detail_count" json:"detail_count,omitempty" toml:"detail_count" yaml:"detail_count,omitempty"`
	WProductID         null.String `boil:"w_product_id" json:"w_product_id,omitempty" toml:"w_product_id" yaml:"w_product_id,omitempty"`
	ProductName        null.String `boil:"product_name" json:"product_name,omitempty" toml:"product_name" yaml:"product_name,omitempty"`
	ReceivingQuantity  null.Int64  `boil:"receiving_quantity" json:"receiving_quantity,omitempty" toml:"receiving_quantity" yaml:"receiving_quantity,omitempty"`
	WShippingQuantity  null.Int64  `boil:"w_shipping_quantity" json:"w_shipping_quantity,omitempty" toml:"w_shipping_quantity" yaml:"w_shipping_quantity,omitempty"`
	WCancelQuantity    null.Int64  `boil:"w_cancel_quantity" json:"w_cancel_quantity,omitempty" toml:"w_cancel_quantity" yaml:"w_cancel_quantity,omitempty"`
	WRemainingQuantity null.Int64  `boil:"w_remaining_quantity" json:"w_remaining_quantity,omitempty" toml:"w_remaining_quantity" yaml:"w_remaining_quantity,omitempty"`
	SellingPrice       null.Int    `boil:"selling_price" json:"selling_price,omitempty" toml:"selling_price" yaml:"selling_price,omitempty"`
	CostPrice          null.Int    `boil:"cost_price" json:"cost_price,omitempty" toml:"cost_price" yaml:"cost_price,omitempty"`
	IsShipped          null.Bool   `boil:"is_shipped" json:"is_shipped,omitempty" toml:"is_shipped" yaml:"is_shipped,omitempty"`
	IsRemaining        null.Bool   `boil:"is_remaining" json:"is_remaining,omitempty" toml:"is_remaining" yaml:"is_remaining,omitempty"`
}

var WOrderDetailColumns = struct {
	Register           string
	WOrderNo           string
	OrderNo            string
	AggregatedDetails  string
	DetailCount        string
	WProductID         string
	ProductName        string
	ReceivingQuantity  string
	WShippingQuantity  string
	WCancelQuantity    string
	WRemainingQuantity string
	SellingPrice       string
	CostPrice          string
	IsShipped          string
	IsRemaining        string
}{
	Register:           "register",
	WOrderNo:           "w_order_no",
	OrderNo:            "order_no",
	AggregatedDetails:  "aggregated_details",
	DetailCount:        "detail_count",
	WProductID:         "w_product_id",
	ProductName:        "product_name",
	ReceivingQuantity:  "receiving_quantity",
	WShippingQuantity:  "w_shipping_quantity",
	WCancelQuantity:    "w_cancel_quantity",
	WRemainingQuantity: "w_remaining_quantity",
	SellingPrice:       "selling_price",
	CostPrice:          "cost_price",
	IsShipped:          "is_shipped",
	IsRemaining:        "is_remaining",
}

var WOrderDetailTableColumns = struct {
	Register           string
	WOrderNo           string
	OrderNo            string
	AggregatedDetails  string
	DetailCount        string
	WProductID         string
	ProductName        string
	ReceivingQuantity  string
	WShippingQuantity  string
	WCancelQuantity    string
	WRemainingQuantity string
	SellingPrice       string
	CostPrice          string
	IsShipped          string
	IsRemaining        string
}{
	Register:           "w_order_details.register",
	WOrderNo:           "w_order_details.w_order_no",
	OrderNo:            "w_order_details.order_no",
	AggregatedDetails:  "w_order_details.aggregated_details",
	DetailCount:        "w_order_details.detail_count",
	WProductID:         "w_order_details.w_product_id",
	ProductName:        "w_order_details.product_name",
	ReceivingQuantity:  "w_order_details.receiving_quantity",
	WShippingQuantity:  "w_order_details.w_shipping_quantity",
	WCancelQuantity:    "w_order_details.w_cancel_quantity",
	WRemainingQuantity: "w_order_details.w_remaining_quantity",
	SellingPrice:       "w_order_details.selling_price",
	CostPrice:          "w_order_details.cost_price",
	IsShipped:          "w_order_details.is_shipped",
	IsRemaining:        "w_order_details.is_remaining",
}

// Generated where

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var WOrderDetailWhere = struct {
	Register           whereHelpernull_Bool
	WOrderNo           whereHelpernull_String
	OrderNo            whereHelpernull_Int
	AggregatedDetails  whereHelpernull_String
	DetailCount        whereHelpernull_Int64
	WProductID         whereHelpernull_String
	ProductName        whereHelpernull_String
	ReceivingQuantity  whereHelpernull_Int64
	WShippingQuantity  whereHelpernull_Int64
	WCancelQuantity    whereHelpernull_Int64
	WRemainingQuantity whereHelpernull_Int64
	SellingPrice       whereHelpernull_Int
	CostPrice          whereHelpernull_Int
	IsShipped          whereHelpernull_Bool
	IsRemaining        whereHelpernull_Bool
}{
	Register:           whereHelpernull_Bool{field: "\"clean\".\"w_order_details\".\"register\""},
	WOrderNo:           whereHelpernull_String{field: "\"clean\".\"w_order_details\".\"w_order_no\""},
	OrderNo:            whereHelpernull_Int{field: "\"clean\".\"w_order_details\".\"order_no\""},
	AggregatedDetails:  whereHelpernull_String{field: "\"clean\".\"w_order_details\".\"aggregated_details\""},
	DetailCount:        whereHelpernull_Int64{field: "\"clean\".\"w_order_details\".\"detail_count\""},
	WProductID:         whereHelpernull_String{field: "\"clean\".\"w_order_details\".\"w_product_id\""},
	ProductName:        whereHelpernull_String{field: "\"clean\".\"w_order_details\".\"product_name\""},
	ReceivingQuantity:  whereHelpernull_Int64{field: "\"clean\".\"w_order_details\".\"receiving_quantity\""},
	WShippingQuantity:  whereHelpernull_Int64{field: "\"clean\".\"w_order_details\".\"w_shipping_quantity\""},
	WCancelQuantity:    whereHelpernull_Int64{field: "\"clean\".\"w_order_details\".\"w_cancel_quantity\""},
	WRemainingQuantity: whereHelpernull_Int64{field: "\"clean\".\"w_order_details\".\"w_remaining_quantity\""},
	SellingPrice:       whereHelpernull_Int{field: "\"clean\".\"w_order_details\".\"selling_price\""},
	CostPrice:          whereHelpernull_Int{field: "\"clean\".\"w_order_details\".\"cost_price\""},
	IsShipped:          whereHelpernull_Bool{field: "\"clean\".\"w_order_details\".\"is_shipped\""},
	IsRemaining:        whereHelpernull_Bool{field: "\"clean\".\"w_order_details\".\"is_remaining\""},
}

var (
	wOrderDetailAllColumns            = []string{"register", "w_order_no", "order_no", "aggregated_details", "detail_count", "w_product_id", "product_name", "receiving_quantity", "w_shipping_quantity", "w_cancel_quantity", "w_remaining_quantity", "selling_price", "cost_price", "is_shipped", "is_remaining"}
	wOrderDetailColumnsWithoutDefault = []string{}
	wOrderDetailColumnsWithDefault    = []string{"register", "w_order_no", "order_no", "aggregated_details", "detail_count", "w_product_id", "product_name", "receiving_quantity", "w_shipping_quantity", "w_cancel_quantity", "w_remaining_quantity", "selling_price", "cost_price", "is_shipped", "is_remaining"}
	wOrderDetailPrimaryKeyColumns     = []string{}
	wOrderDetailGeneratedColumns      = []string{}
)

type (
	// WOrderDetailSlice is an alias for a slice of pointers to WOrderDetail.
	// This should almost always be used instead of []WOrderDetail.
	WOrderDetailSlice []*WOrderDetail
	// WOrderDetailHook is the signature for custom WOrderDetail hook methods
	WOrderDetailHook func(context.Context, boil.ContextExecutor, *WOrderDetail) error

	wOrderDetailQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	wOrderDetailType           = reflect.TypeOf(&WOrderDetail{})
	wOrderDetailMapping        = queries.MakeStructMapping(wOrderDetailType)
	wOrderDetailInsertCacheMut sync.RWMutex
	wOrderDetailInsertCache    = make(map[string]insertCache)
	wOrderDetailUpdateCacheMut sync.RWMutex
	wOrderDetailUpdateCache    = make(map[string]updateCache)
	wOrderDetailUpsertCacheMut sync.RWMutex
	wOrderDetailUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
	// These are used in some views
	_ = fmt.Sprintln("")
	_ = reflect.Int
	_ = strings.Builder{}
	_ = sync.Mutex{}
	_ = strmangle.Plural("")
	_ = strconv.IntSize
)

var wOrderDetailAfterSelectMu sync.Mutex
var wOrderDetailAfterSelectHooks []WOrderDetailHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *WOrderDetail) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wOrderDetailAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddWOrderDetailHook registers your hook function for all future operations.
func AddWOrderDetailHook(hookPoint boil.HookPoint, wOrderDetailHook WOrderDetailHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		wOrderDetailAfterSelectMu.Lock()
		wOrderDetailAfterSelectHooks = append(wOrderDetailAfterSelectHooks, wOrderDetailHook)
		wOrderDetailAfterSelectMu.Unlock()
	}
}

// One returns a single wOrderDetail record from the query.
func (q wOrderDetailQuery) One(ctx context.Context, exec boil.ContextExecutor) (*WOrderDetail, error) {
	o := &WOrderDetail{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "clean: failed to execute a one query for w_order_details")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all WOrderDetail records from the query.
func (q wOrderDetailQuery) All(ctx context.Context, exec boil.ContextExecutor) (WOrderDetailSlice, error) {
	var o []*WOrderDetail

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "clean: failed to assign all query results to WOrderDetail slice")
	}

	if len(wOrderDetailAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all WOrderDetail records in the query.
func (q wOrderDetailQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "clean: failed to count w_order_details rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q wOrderDetailQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "clean: failed to check if w_order_details exists")
	}

	return count > 0, nil
}

// WOrderDetails retrieves all the records using an executor.
func WOrderDetails(mods ...qm.QueryMod) wOrderDetailQuery {
	mods = append(mods, qm.From("\"clean\".\"w_order_details\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"clean\".\"w_order_details\".*"})
	}

	return wOrderDetailQuery{q}
}
