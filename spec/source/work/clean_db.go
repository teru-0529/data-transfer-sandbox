// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package work

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CleanDB is an object representing the database table.
type CleanDB struct { // キー
	DumpKey string `boil:"dump_key" json:"dump_key" toml:"dump_key" yaml:"dump_key"`
	// ダンプファイル名
	DumpFileName string `boil:"dump_file_name" json:"dump_file_name" toml:"dump_file_name" yaml:"dump_file_name"`

	R *cleanDBR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cleanDBL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CleanDBColumns = struct {
	DumpKey      string
	DumpFileName string
}{
	DumpKey:      "dump_key",
	DumpFileName: "dump_file_name",
}

var CleanDBTableColumns = struct {
	DumpKey      string
	DumpFileName string
}{
	DumpKey:      "clean_db.dump_key",
	DumpFileName: "clean_db.dump_file_name",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod   { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var CleanDBWhere = struct {
	DumpKey      whereHelperstring
	DumpFileName whereHelperstring
}{
	DumpKey:      whereHelperstring{field: "\"work\".\"clean_db\".\"dump_key\""},
	DumpFileName: whereHelperstring{field: "\"work\".\"clean_db\".\"dump_file_name\""},
}

// CleanDBRels is where relationship names are stored.
var CleanDBRels = struct {
}{}

// cleanDBR is where relationships are stored.
type cleanDBR struct {
}

// NewStruct creates a new relationship struct
func (*cleanDBR) NewStruct() *cleanDBR {
	return &cleanDBR{}
}

// cleanDBL is where Load methods for each relationship are stored.
type cleanDBL struct{}

var (
	cleanDBAllColumns            = []string{"dump_key", "dump_file_name"}
	cleanDBColumnsWithoutDefault = []string{"dump_file_name"}
	cleanDBColumnsWithDefault    = []string{"dump_key"}
	cleanDBPrimaryKeyColumns     = []string{"dump_key"}
	cleanDBGeneratedColumns      = []string{}
)

type (
	// CleanDBSlice is an alias for a slice of pointers to CleanDB.
	// This should almost always be used instead of []CleanDB.
	CleanDBSlice []*CleanDB
	// CleanDBHook is the signature for custom CleanDB hook methods
	CleanDBHook func(context.Context, boil.ContextExecutor, *CleanDB) error

	cleanDBQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cleanDBType                 = reflect.TypeOf(&CleanDB{})
	cleanDBMapping              = queries.MakeStructMapping(cleanDBType)
	cleanDBPrimaryKeyMapping, _ = queries.BindMapping(cleanDBType, cleanDBMapping, cleanDBPrimaryKeyColumns)
	cleanDBInsertCacheMut       sync.RWMutex
	cleanDBInsertCache          = make(map[string]insertCache)
	cleanDBUpdateCacheMut       sync.RWMutex
	cleanDBUpdateCache          = make(map[string]updateCache)
	cleanDBUpsertCacheMut       sync.RWMutex
	cleanDBUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cleanDBAfterSelectMu sync.Mutex
var cleanDBAfterSelectHooks []CleanDBHook

var cleanDBBeforeInsertMu sync.Mutex
var cleanDBBeforeInsertHooks []CleanDBHook
var cleanDBAfterInsertMu sync.Mutex
var cleanDBAfterInsertHooks []CleanDBHook

var cleanDBBeforeUpdateMu sync.Mutex
var cleanDBBeforeUpdateHooks []CleanDBHook
var cleanDBAfterUpdateMu sync.Mutex
var cleanDBAfterUpdateHooks []CleanDBHook

var cleanDBBeforeDeleteMu sync.Mutex
var cleanDBBeforeDeleteHooks []CleanDBHook
var cleanDBAfterDeleteMu sync.Mutex
var cleanDBAfterDeleteHooks []CleanDBHook

var cleanDBBeforeUpsertMu sync.Mutex
var cleanDBBeforeUpsertHooks []CleanDBHook
var cleanDBAfterUpsertMu sync.Mutex
var cleanDBAfterUpsertHooks []CleanDBHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CleanDB) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cleanDBAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CleanDB) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cleanDBBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CleanDB) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cleanDBAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CleanDB) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cleanDBBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CleanDB) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cleanDBAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CleanDB) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cleanDBBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CleanDB) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cleanDBAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CleanDB) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cleanDBBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CleanDB) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cleanDBAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCleanDBHook registers your hook function for all future operations.
func AddCleanDBHook(hookPoint boil.HookPoint, cleanDBHook CleanDBHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		cleanDBAfterSelectMu.Lock()
		cleanDBAfterSelectHooks = append(cleanDBAfterSelectHooks, cleanDBHook)
		cleanDBAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		cleanDBBeforeInsertMu.Lock()
		cleanDBBeforeInsertHooks = append(cleanDBBeforeInsertHooks, cleanDBHook)
		cleanDBBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		cleanDBAfterInsertMu.Lock()
		cleanDBAfterInsertHooks = append(cleanDBAfterInsertHooks, cleanDBHook)
		cleanDBAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		cleanDBBeforeUpdateMu.Lock()
		cleanDBBeforeUpdateHooks = append(cleanDBBeforeUpdateHooks, cleanDBHook)
		cleanDBBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		cleanDBAfterUpdateMu.Lock()
		cleanDBAfterUpdateHooks = append(cleanDBAfterUpdateHooks, cleanDBHook)
		cleanDBAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		cleanDBBeforeDeleteMu.Lock()
		cleanDBBeforeDeleteHooks = append(cleanDBBeforeDeleteHooks, cleanDBHook)
		cleanDBBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		cleanDBAfterDeleteMu.Lock()
		cleanDBAfterDeleteHooks = append(cleanDBAfterDeleteHooks, cleanDBHook)
		cleanDBAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		cleanDBBeforeUpsertMu.Lock()
		cleanDBBeforeUpsertHooks = append(cleanDBBeforeUpsertHooks, cleanDBHook)
		cleanDBBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		cleanDBAfterUpsertMu.Lock()
		cleanDBAfterUpsertHooks = append(cleanDBAfterUpsertHooks, cleanDBHook)
		cleanDBAfterUpsertMu.Unlock()
	}
}

// One returns a single cleanDB record from the query.
func (q cleanDBQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CleanDB, error) {
	o := &CleanDB{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "work: failed to execute a one query for clean_db")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CleanDB records from the query.
func (q cleanDBQuery) All(ctx context.Context, exec boil.ContextExecutor) (CleanDBSlice, error) {
	var o []*CleanDB

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "work: failed to assign all query results to CleanDB slice")
	}

	if len(cleanDBAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CleanDB records in the query.
func (q cleanDBQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "work: failed to count clean_db rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cleanDBQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "work: failed to check if clean_db exists")
	}

	return count > 0, nil
}

// CleanDBS retrieves all the records using an executor.
func CleanDBS(mods ...qm.QueryMod) cleanDBQuery {
	mods = append(mods, qm.From("\"work\".\"clean_db\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"work\".\"clean_db\".*"})
	}

	return cleanDBQuery{q}
}

// FindCleanDB retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCleanDB(ctx context.Context, exec boil.ContextExecutor, dumpKey string, selectCols ...string) (*CleanDB, error) {
	cleanDBObj := &CleanDB{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"work\".\"clean_db\" where \"dump_key\"=$1", sel,
	)

	q := queries.Raw(query, dumpKey)

	err := q.Bind(ctx, exec, cleanDBObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "work: unable to select from clean_db")
	}

	if err = cleanDBObj.doAfterSelectHooks(ctx, exec); err != nil {
		return cleanDBObj, err
	}

	return cleanDBObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CleanDB) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("work: no clean_db provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cleanDBColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cleanDBInsertCacheMut.RLock()
	cache, cached := cleanDBInsertCache[key]
	cleanDBInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cleanDBAllColumns,
			cleanDBColumnsWithDefault,
			cleanDBColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cleanDBType, cleanDBMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cleanDBType, cleanDBMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"work\".\"clean_db\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"work\".\"clean_db\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "work: unable to insert into clean_db")
	}

	if !cached {
		cleanDBInsertCacheMut.Lock()
		cleanDBInsertCache[key] = cache
		cleanDBInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CleanDB.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CleanDB) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cleanDBUpdateCacheMut.RLock()
	cache, cached := cleanDBUpdateCache[key]
	cleanDBUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cleanDBAllColumns,
			cleanDBPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("work: unable to update clean_db, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"work\".\"clean_db\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, cleanDBPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cleanDBType, cleanDBMapping, append(wl, cleanDBPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "work: unable to update clean_db row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "work: failed to get rows affected by update for clean_db")
	}

	if !cached {
		cleanDBUpdateCacheMut.Lock()
		cleanDBUpdateCache[key] = cache
		cleanDBUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cleanDBQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "work: unable to update all for clean_db")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "work: unable to retrieve rows affected for clean_db")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CleanDBSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("work: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cleanDBPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"work\".\"clean_db\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, cleanDBPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "work: unable to update all in cleanDB slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "work: unable to retrieve rows affected all in update all cleanDB")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CleanDB) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("work: no clean_db provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cleanDBColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cleanDBUpsertCacheMut.RLock()
	cache, cached := cleanDBUpsertCache[key]
	cleanDBUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			cleanDBAllColumns,
			cleanDBColumnsWithDefault,
			cleanDBColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			cleanDBAllColumns,
			cleanDBPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("work: unable to upsert clean_db, could not build update column list")
		}

		ret := strmangle.SetComplement(cleanDBAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(cleanDBPrimaryKeyColumns) == 0 {
				return errors.New("work: unable to upsert clean_db, could not build conflict column list")
			}

			conflict = make([]string, len(cleanDBPrimaryKeyColumns))
			copy(conflict, cleanDBPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"work\".\"clean_db\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(cleanDBType, cleanDBMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cleanDBType, cleanDBMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "work: unable to upsert clean_db")
	}

	if !cached {
		cleanDBUpsertCacheMut.Lock()
		cleanDBUpsertCache[key] = cache
		cleanDBUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CleanDB record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CleanDB) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("work: no CleanDB provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cleanDBPrimaryKeyMapping)
	sql := "DELETE FROM \"work\".\"clean_db\" WHERE \"dump_key\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "work: unable to delete from clean_db")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "work: failed to get rows affected by delete for clean_db")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cleanDBQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("work: no cleanDBQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "work: unable to delete all from clean_db")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "work: failed to get rows affected by deleteall for clean_db")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CleanDBSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cleanDBBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cleanDBPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"work\".\"clean_db\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, cleanDBPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "work: unable to delete all from cleanDB slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "work: failed to get rows affected by deleteall for clean_db")
	}

	if len(cleanDBAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CleanDB) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCleanDB(ctx, exec, o.DumpKey)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CleanDBSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CleanDBSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cleanDBPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"work\".\"clean_db\".* FROM \"work\".\"clean_db\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, cleanDBPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "work: unable to reload all in CleanDBSlice")
	}

	*o = slice

	return nil
}

// CleanDBExists checks if the CleanDB row exists.
func CleanDBExists(ctx context.Context, exec boil.ContextExecutor, dumpKey string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"work\".\"clean_db\" where \"dump_key\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, dumpKey)
	}
	row := exec.QueryRowContext(ctx, sql, dumpKey)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "work: unable to check if clean_db exists")
	}

	return exists, nil
}

// Exists checks if the CleanDB row exists.
func (o *CleanDB) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CleanDBExists(ctx, exec, o.DumpKey)
}
